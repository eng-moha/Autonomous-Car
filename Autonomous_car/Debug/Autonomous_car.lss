
Autonomous_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001524  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00001524  000015b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080009a  0080009a  000015f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bfc  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f36  00000000  00000000  0000456c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001976  00000000  00000000  000054a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  00006e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae2  00000000  00000000  00007578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000186d  00000000  00000000  0000805a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  000098c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__vector_4>
      14:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__vector_10>
      2c:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3b       	cpi	r26, 0xBC	; 188
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 04 	call	0x87a	; 0x87a <main>
      8a:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DCM_init>:
	}
	
	
	
	
}
      92:	cf 93       	push	r28
      94:	c8 2f       	mov	r28, r24
      96:	41 e0       	ldi	r20, 0x01	; 1
      98:	64 e0       	ldi	r22, 0x04	; 4
      9a:	83 e0       	ldi	r24, 0x03	; 3
      9c:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
      a0:	41 e0       	ldi	r20, 0x01	; 1
      a2:	64 e0       	ldi	r22, 0x04	; 4
      a4:	83 e0       	ldi	r24, 0x03	; 3
      a6:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
      aa:	41 e0       	ldi	r20, 0x01	; 1
      ac:	63 e0       	ldi	r22, 0x03	; 3
      ae:	82 e0       	ldi	r24, 0x02	; 2
      b0:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	64 e0       	ldi	r22, 0x04	; 4
      b8:	82 e0       	ldi	r24, 0x02	; 2
      ba:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
      be:	41 e0       	ldi	r20, 0x01	; 1
      c0:	65 e0       	ldi	r22, 0x05	; 5
      c2:	82 e0       	ldi	r24, 0x02	; 2
      c4:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	66 e0       	ldi	r22, 0x06	; 6
      cc:	82 e0       	ldi	r24, 0x02	; 2
      ce:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
      d2:	0e 94 82 07 	call	0xf04	; 0xf04 <TMR2_init>
      d6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <TMR2_start>
      da:	c1 30       	cpi	r28, 0x01	; 1
      dc:	19 f0       	breq	.+6      	; 0xe4 <DCM_init+0x52>
      de:	c2 30       	cpi	r28, 0x02	; 2
      e0:	39 f0       	breq	.+14     	; 0xf0 <DCM_init+0x5e>
      e2:	0b c0       	rjmp	.+22     	; 0xfa <DCM_init+0x68>
      e4:	41 e0       	ldi	r20, 0x01	; 1
      e6:	64 e0       	ldi	r22, 0x04	; 4
      e8:	83 e0       	ldi	r24, 0x03	; 3
      ea:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
      ee:	05 c0       	rjmp	.+10     	; 0xfa <DCM_init+0x68>
      f0:	41 e0       	ldi	r20, 0x01	; 1
      f2:	64 e0       	ldi	r22, 0x04	; 4
      f4:	83 e0       	ldi	r24, 0x03	; 3
      f6:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <DCM_on>:
      fe:	81 30       	cpi	r24, 0x01	; 1
     100:	19 f0       	breq	.+6      	; 0x108 <DCM_on+0xa>
     102:	82 30       	cpi	r24, 0x02	; 2
     104:	e1 f0       	breq	.+56     	; 0x13e <DCM_on+0x40>
     106:	08 95       	ret
     108:	61 30       	cpi	r22, 0x01	; 1
     10a:	19 f0       	breq	.+6      	; 0x112 <DCM_on+0x14>
     10c:	62 30       	cpi	r22, 0x02	; 2
     10e:	61 f0       	breq	.+24     	; 0x128 <DCM_on+0x2a>
     110:	08 95       	ret
     112:	41 e0       	ldi	r20, 0x01	; 1
     114:	63 e0       	ldi	r22, 0x03	; 3
     116:	82 e0       	ldi	r24, 0x02	; 2
     118:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     11c:	40 e0       	ldi	r20, 0x00	; 0
     11e:	64 e0       	ldi	r22, 0x04	; 4
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     126:	08 95       	ret
     128:	41 e0       	ldi	r20, 0x01	; 1
     12a:	64 e0       	ldi	r22, 0x04	; 4
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	63 e0       	ldi	r22, 0x03	; 3
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     13c:	08 95       	ret
     13e:	61 30       	cpi	r22, 0x01	; 1
     140:	19 f0       	breq	.+6      	; 0x148 <DCM_on+0x4a>
     142:	62 30       	cpi	r22, 0x02	; 2
     144:	61 f0       	breq	.+24     	; 0x15e <DCM_on+0x60>
     146:	08 95       	ret
     148:	41 e0       	ldi	r20, 0x01	; 1
     14a:	65 e0       	ldi	r22, 0x05	; 5
     14c:	82 e0       	ldi	r24, 0x02	; 2
     14e:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	66 e0       	ldi	r22, 0x06	; 6
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     15c:	08 95       	ret
     15e:	41 e0       	ldi	r20, 0x01	; 1
     160:	66 e0       	ldi	r22, 0x06	; 6
     162:	82 e0       	ldi	r24, 0x02	; 2
     164:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     168:	40 e0       	ldi	r20, 0x00	; 0
     16a:	65 e0       	ldi	r22, 0x05	; 5
     16c:	82 e0       	ldi	r24, 0x02	; 2
     16e:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     172:	08 95       	ret

00000174 <DCM_off>:
void DCM_off(u8 motorId)
{
	switch(motorId)
     174:	81 30       	cpi	r24, 0x01	; 1
     176:	19 f0       	breq	.+6      	; 0x17e <DCM_off+0xa>
     178:	82 30       	cpi	r24, 0x02	; 2
     17a:	61 f0       	breq	.+24     	; 0x194 <DCM_off+0x20>
     17c:	08 95       	ret
	{
		case DCM_A :
		DIO_setPinValue (DMC_IN1_PORT,DMC_IN1_PIN,DIO_PIN_LOW);
     17e:	40 e0       	ldi	r20, 0x00	; 0
     180:	63 e0       	ldi	r22, 0x03	; 3
     182:	82 e0       	ldi	r24, 0x02	; 2
     184:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
		DIO_setPinValue (DMC_IN2_PORT,DMC_IN2_PIN,DIO_PIN_LOW);
     188:	40 e0       	ldi	r20, 0x00	; 0
     18a:	64 e0       	ldi	r22, 0x04	; 4
     18c:	82 e0       	ldi	r24, 0x02	; 2
     18e:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
		break;
     192:	08 95       	ret
		
		case DCM_B:
		DIO_setPinValue (DMC_IN3_PORT,DMC_IN3_PIN,DIO_PIN_LOW);
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	65 e0       	ldi	r22, 0x05	; 5
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
		DIO_setPinValue (DMC_IN4_PORT,DMC_IN4_PIN,DIO_PIN_LOW);
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	66 e0       	ldi	r22, 0x06	; 6
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     1a8:	08 95       	ret

000001aa <DCM_Car_Stop>:
	}
	
}
void DCM_Car_Stop(void)
{
	DCM_off(DCM_A);
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	0e 94 ba 00 	call	0x174	; 0x174 <DCM_off>
	DCM_off(DCM_B);
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	0e 94 ba 00 	call	0x174	; 0x174 <DCM_off>
     1b6:	08 95       	ret

000001b8 <DCM_Car_Move_Forward>:
}
void DCM_Car_Move_Forward(void)
{
	DCM_on(DCM_A ,DCM_CLOCK_WISE);
     1b8:	61 e0       	ldi	r22, 0x01	; 1
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	0e 94 7f 00 	call	0xfe	; 0xfe <DCM_on>
	DCM_on(DCM_B ,DCM_CLOCK_WISE);
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	0e 94 7f 00 	call	0xfe	; 0xfe <DCM_on>
     1c8:	08 95       	ret

000001ca <DCM_Car_Move_Right_90>:
}

void DCM_Car_Move_Right_90(void)
{
	DCM_on(DCM_A ,DCM_CLOCK_WISE);
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	0e 94 7f 00 	call	0xfe	; 0xfe <DCM_on>
	DCM_off(DCM_B);
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	0e 94 ba 00 	call	0x174	; 0x174 <DCM_off>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d8:	2f ef       	ldi	r18, 0xFF	; 255
     1da:	81 e1       	ldi	r24, 0x11	; 17
     1dc:	9a e7       	ldi	r25, 0x7A	; 122
     1de:	21 50       	subi	r18, 0x01	; 1
     1e0:	80 40       	sbci	r24, 0x00	; 0
     1e2:	90 40       	sbci	r25, 0x00	; 0
     1e4:	e1 f7       	brne	.-8      	; 0x1de <DCM_Car_Move_Right_90+0x14>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <DCM_Car_Move_Right_90+0x1e>
     1e8:	00 00       	nop
	_delay_ms(2500);
	DCM_off(DCM_A);
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	0e 94 ba 00 	call	0x174	; 0x174 <DCM_off>
	DCM_off(DCM_B);
     1f0:	82 e0       	ldi	r24, 0x02	; 2
     1f2:	0e 94 ba 00 	call	0x174	; 0x174 <DCM_off>
     1f6:	08 95       	ret

000001f8 <DCM_Car_Move_Left_90>:
}
void DCM_Car_Move_Left_90(void)
{
	DCM_on(DCM_B ,DCM_CLOCK_WISE);
     1f8:	61 e0       	ldi	r22, 0x01	; 1
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	0e 94 7f 00 	call	0xfe	; 0xfe <DCM_on>
	DCM_off(DCM_A);
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	0e 94 ba 00 	call	0x174	; 0x174 <DCM_off>
     206:	2f ef       	ldi	r18, 0xFF	; 255
     208:	81 e1       	ldi	r24, 0x11	; 17
     20a:	9a e7       	ldi	r25, 0x7A	; 122
     20c:	21 50       	subi	r18, 0x01	; 1
     20e:	80 40       	sbci	r24, 0x00	; 0
     210:	90 40       	sbci	r25, 0x00	; 0
     212:	e1 f7       	brne	.-8      	; 0x20c <DCM_Car_Move_Left_90+0x14>
     214:	00 c0       	rjmp	.+0      	; 0x216 <DCM_Car_Move_Left_90+0x1e>
     216:	00 00       	nop
	_delay_ms(2500);
	DCM_off(DCM_A);
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	0e 94 ba 00 	call	0x174	; 0x174 <DCM_off>
	DCM_off(DCM_B);
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	0e 94 ba 00 	call	0x174	; 0x174 <DCM_off>
     224:	08 95       	ret

00000226 <DCM_Car_Move_Back>:
}
void DCM_Car_Move_Back(void)
{
	DCM_on(DCM_A ,DCM_COUNTER_CLOCK_WISE);
     226:	62 e0       	ldi	r22, 0x02	; 2
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	0e 94 7f 00 	call	0xfe	; 0xfe <DCM_on>
	DCM_on(DCM_B ,DCM_COUNTER_CLOCK_WISE);
     22e:	62 e0       	ldi	r22, 0x02	; 2
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	0e 94 7f 00 	call	0xfe	; 0xfe <DCM_on>
     236:	08 95       	ret

00000238 <private_writeHalfPort>:
}



static void  private_writeHalfPort(u8 value)
{
     238:	cf 93       	push	r28
     23a:	c8 2f       	mov	r28, r24
	
	if (GET_BIT(value,0)==1)
     23c:	80 ff       	sbrs	r24, 0
     23e:	06 c0       	rjmp	.+12     	; 0x24c <private_writeHalfPort+0x14>
	{
		DIO_setPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_HIGH);
     240:	41 e0       	ldi	r20, 0x01	; 1
     242:	64 e0       	ldi	r22, 0x04	; 4
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     24a:	05 c0       	rjmp	.+10     	; 0x256 <private_writeHalfPort+0x1e>
	}
	else
	{
		DIO_setPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_LOW);
     24c:	40 e0       	ldi	r20, 0x00	; 0
     24e:	64 e0       	ldi	r22, 0x04	; 4
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
	}
	if (GET_BIT(value,1)==1)
     256:	c1 ff       	sbrs	r28, 1
     258:	06 c0       	rjmp	.+12     	; 0x266 <private_writeHalfPort+0x2e>
	{
		DIO_setPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_HIGH);
     25a:	41 e0       	ldi	r20, 0x01	; 1
     25c:	65 e0       	ldi	r22, 0x05	; 5
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     264:	05 c0       	rjmp	.+10     	; 0x270 <private_writeHalfPort+0x38>
	}
	else
	{
		DIO_setPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_LOW);
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	65 e0       	ldi	r22, 0x05	; 5
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
	}
	
	if (GET_BIT(value,2)==1)
     270:	c2 ff       	sbrs	r28, 2
     272:	06 c0       	rjmp	.+12     	; 0x280 <private_writeHalfPort+0x48>
	{
		DIO_setPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_HIGH);
     274:	41 e0       	ldi	r20, 0x01	; 1
     276:	66 e0       	ldi	r22, 0x06	; 6
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     27e:	05 c0       	rjmp	.+10     	; 0x28a <private_writeHalfPort+0x52>
	}
	else
	{
		DIO_setPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_LOW);
     280:	40 e0       	ldi	r20, 0x00	; 0
     282:	66 e0       	ldi	r22, 0x06	; 6
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
	}
	
	if (GET_BIT(value,3)==1)
     28a:	c3 ff       	sbrs	r28, 3
     28c:	06 c0       	rjmp	.+12     	; 0x29a <private_writeHalfPort+0x62>
	{
		DIO_setPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_HIGH);
     28e:	41 e0       	ldi	r20, 0x01	; 1
     290:	67 e0       	ldi	r22, 0x07	; 7
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     298:	05 c0       	rjmp	.+10     	; 0x2a4 <private_writeHalfPort+0x6c>
	}
	else
	{
		DIO_setPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_LOW);
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	67 e0       	ldi	r22, 0x07	; 7
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
	}
	
	
}
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <LCD_sendComand>:
	
	
}
			
void LCD_sendComand (u8 comand) 
{
     2a8:	cf 93       	push	r28
     2aa:	c8 2f       	mov	r28, r24
	
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);   // RS=0 
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	61 e0       	ldi	r22, 0x01	; 1
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>

	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);   //RW =0 
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	62 e0       	ldi	r22, 0x02	; 2
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
	
	
	    private_writeHalfPort(comand>>4);
     2c0:	8c 2f       	mov	r24, r28
     2c2:	82 95       	swap	r24
     2c4:	8f 70       	andi	r24, 0x0F	; 15
     2c6:	0e 94 1c 01 	call	0x238	; 0x238 <private_writeHalfPort>
	
	
	
		DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH); 
     2ca:	41 e0       	ldi	r20, 0x01	; 1
     2cc:	63 e0       	ldi	r22, 0x03	; 3
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     2d4:	8f e9       	ldi	r24, 0x9F	; 159
     2d6:	9f e0       	ldi	r25, 0x0F	; 15
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_sendComand+0x30>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_sendComand+0x36>
     2de:	00 00       	nop
	    _delay_ms(1);
		DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);   
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	63 e0       	ldi	r22, 0x03	; 3
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>

	    private_writeHalfPort(comand);
     2ea:	8c 2f       	mov	r24, r28
     2ec:	0e 94 1c 01 	call	0x238	; 0x238 <private_writeHalfPort>
	
	
	    DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH); 
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	63 e0       	ldi	r22, 0x03	; 3
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     2fa:	8f e9       	ldi	r24, 0x9F	; 159
     2fc:	9f e0       	ldi	r25, 0x0F	; 15
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_sendComand+0x56>
     302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_sendComand+0x5c>
     304:	00 00       	nop
	    _delay_ms(1);
		DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);   
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	63 e0       	ldi	r22, 0x03	; 3
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>

}
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <LCD_init>:
#include "LCD_config.h"
#include "LCD_private.h"

void LCD_init(void)
{
	DIO_setPinDirection(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT);
     314:	41 e0       	ldi	r20, 0x01	; 1
     316:	61 e0       	ldi	r22, 0x01	; 1
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_RW_PORT, LCD_RW_PIN, DIO_PIN_OUTPUT);
     31e:	41 e0       	ldi	r20, 0x01	; 1
     320:	62 e0       	ldi	r22, 0x02	; 2
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT);
     328:	41 e0       	ldi	r20, 0x01	; 1
     32a:	63 e0       	ldi	r22, 0x03	; 3
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT);
     332:	41 e0       	ldi	r20, 0x01	; 1
     334:	64 e0       	ldi	r22, 0x04	; 4
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT);
     33c:	41 e0       	ldi	r20, 0x01	; 1
     33e:	65 e0       	ldi	r22, 0x05	; 5
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT);
     346:	41 e0       	ldi	r20, 0x01	; 1
     348:	66 e0       	ldi	r22, 0x06	; 6
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT);
     350:	41 e0       	ldi	r20, 0x01	; 1
     352:	67 e0       	ldi	r22, 0x07	; 7
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
     35a:	2f e7       	ldi	r18, 0x7F	; 127
     35c:	85 eb       	ldi	r24, 0xB5	; 181
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	21 50       	subi	r18, 0x01	; 1
     362:	80 40       	sbci	r24, 0x00	; 0
     364:	90 40       	sbci	r25, 0x00	; 0
     366:	e1 f7       	brne	.-8      	; 0x360 <LCD_init+0x4c>
     368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_init+0x56>
     36a:	00 00       	nop
	
	_delay_ms(35);
	
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);   // RS=0 
     36c:	40 e0       	ldi	r20, 0x00	; 0
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
   
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);   //RW =0 
     376:	40 e0       	ldi	r20, 0x00	; 0
     378:	62 e0       	ldi	r22, 0x02	; 2
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
	
	private_writeHalfPort(0b0010);
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	0e 94 1c 01 	call	0x238	; 0x238 <private_writeHalfPort>
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH); 
     386:	41 e0       	ldi	r20, 0x01	; 1
     388:	63 e0       	ldi	r22, 0x03	; 3
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     390:	8f e9       	ldi	r24, 0x9F	; 159
     392:	9f e0       	ldi	r25, 0x0F	; 15
     394:	01 97       	sbiw	r24, 0x01	; 1
     396:	f1 f7       	brne	.-4      	; 0x394 <LCD_init+0x80>
     398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_init+0x86>
     39a:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);   
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	63 e0       	ldi	r22, 0x03	; 3
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
    // Function Set
	LCD_sendComand(0b00101000);
     3a6:	88 e2       	ldi	r24, 0x28	; 40
     3a8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_sendComand>
     3ac:	9f e7       	ldi	r25, 0x7F	; 127
     3ae:	22 e3       	ldi	r18, 0x32	; 50
     3b0:	82 e0       	ldi	r24, 0x02	; 2
     3b2:	91 50       	subi	r25, 0x01	; 1
     3b4:	20 40       	sbci	r18, 0x00	; 0
     3b6:	80 40       	sbci	r24, 0x00	; 0
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <LCD_init+0x9e>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCD_init+0xa8>
     3bc:	00 00       	nop
	_delay_ms(45);
	//Display ON/OFF
	LCD_sendComand(0b00001111);
     3be:	8f e0       	ldi	r24, 0x0F	; 15
     3c0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_sendComand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c4:	90 ef       	ldi	r25, 0xF0	; 240
     3c6:	9a 95       	dec	r25
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCD_init+0xb2>
	_delay_us(45);
	//Display Clear
	LCD_sendComand(0b00000001);
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_sendComand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d0:	8f e3       	ldi	r24, 0x3F	; 63
     3d2:	9f e1       	ldi	r25, 0x1F	; 31
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <LCD_init+0xc0>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <LCD_init+0xc6>
     3da:	00 00       	nop
	_delay_ms(2);
	
	LCD_sendComand(0b00000110);
     3dc:	86 e0       	ldi	r24, 0x06	; 6
     3de:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_sendComand>
     3e2:	08 95       	ret

000003e4 <LCD_sendChar>:

}


void LCD_sendChar(u8 data)
{
     3e4:	cf 93       	push	r28
     3e6:	c8 2f       	mov	r28, r24
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);   // RS=1 
     3e8:	41 e0       	ldi	r20, 0x01	; 1
     3ea:	61 e0       	ldi	r22, 0x01	; 1
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
   
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);   //RW =0 
     3f2:	40 e0       	ldi	r20, 0x00	; 0
     3f4:	62 e0       	ldi	r22, 0x02	; 2
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
	
	
    private_writeHalfPort(data>>4);
     3fc:	8c 2f       	mov	r24, r28
     3fe:	82 95       	swap	r24
     400:	8f 70       	andi	r24, 0x0F	; 15
     402:	0e 94 1c 01 	call	0x238	; 0x238 <private_writeHalfPort>
	
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH); 
     406:	41 e0       	ldi	r20, 0x01	; 1
     408:	63 e0       	ldi	r22, 0x03	; 3
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     410:	8f e9       	ldi	r24, 0x9F	; 159
     412:	9f e0       	ldi	r25, 0x0F	; 15
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	63 e0       	ldi	r22, 0x03	; 3
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
    private_writeHalfPort(data);
     426:	8c 2f       	mov	r24, r28
     428:	0e 94 1c 01 	call	0x238	; 0x238 <private_writeHalfPort>
	
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH); 
     42c:	41 e0       	ldi	r20, 0x01	; 1
     42e:	63 e0       	ldi	r22, 0x03	; 3
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     436:	8f e9       	ldi	r24, 0x9F	; 159
     438:	9f e0       	ldi	r25, 0x0F	; 15
     43a:	01 97       	sbiw	r24, 0x01	; 1
     43c:	f1 f7       	brne	.-4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     440:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);	
     442:	40 e0       	ldi	r20, 0x00	; 0
     444:	63 e0       	ldi	r22, 0x03	; 3
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
	
	
	
}
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <LCD_sendString>:

void LCD_sendString(u8* String)
{
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	8c 01       	movw	r16, r24
	u8 counter=0;
     458:	c0 e0       	ldi	r28, 0x00	; 0
	while(String[counter]!='\0')
     45a:	03 c0       	rjmp	.+6      	; 0x462 <LCD_sendString+0x12>
	{
		LCD_sendChar(String[counter]);
     45c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_sendChar>
		++counter;
     460:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_sendString(u8* String)
{
	u8 counter=0;
	while(String[counter]!='\0')
     462:	f8 01       	movw	r30, r16
     464:	ec 0f       	add	r30, r28
     466:	f1 1d       	adc	r31, r1
     468:	80 81       	ld	r24, Z
     46a:	81 11       	cpse	r24, r1
     46c:	f7 cf       	rjmp	.-18     	; 0x45c <LCD_sendString+0xc>
	{
		LCD_sendChar(String[counter]);
		++counter;
	}
}
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	08 95       	ret

00000476 <LCD_clear>:
void LCD_clear(void)
{
	LCD_sendComand(0b00000001);
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_sendComand>
     47c:	8f e3       	ldi	r24, 0x3F	; 63
     47e:	9f e1       	ldi	r25, 0x1F	; 31
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <LCD_clear+0xa>
     484:	00 c0       	rjmp	.+0      	; 0x486 <LCD_clear+0x10>
     486:	00 00       	nop
     488:	08 95       	ret

0000048a <LCD_sendNumber>:
}



void LCD_sendNumber         (s32 number)
{
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	60 97       	sbiw	r28, 0x10	; 16
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	6b 01       	movw	r12, r22
     4aa:	7c 01       	movw	r14, r24
	u8 count=0;
	u8 reminder,arr[16]={0,0,0,0,0};
     4ac:	fe 01       	movw	r30, r28
     4ae:	31 96       	adiw	r30, 0x01	; 1
     4b0:	80 e1       	ldi	r24, 0x10	; 16
     4b2:	df 01       	movw	r26, r30
     4b4:	1d 92       	st	X+, r1
     4b6:	8a 95       	dec	r24
     4b8:	e9 f7       	brne	.-6      	; 0x4b4 <LCD_sendNumber+0x2a>
	if (number<0)
     4ba:	ff 20       	and	r15, r15
     4bc:	64 f4       	brge	.+24     	; 0x4d6 <LCD_sendNumber+0x4c>
	{
		LCD_sendChar('-');
     4be:	8d e2       	ldi	r24, 0x2D	; 45
     4c0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_sendChar>
		number=number * -1;
     4c4:	f0 94       	com	r15
     4c6:	e0 94       	com	r14
     4c8:	d0 94       	com	r13
     4ca:	c0 94       	com	r12
     4cc:	c1 1c       	adc	r12, r1
     4ce:	d1 1c       	adc	r13, r1
     4d0:	e1 1c       	adc	r14, r1
     4d2:	f1 1c       	adc	r15, r1
     4d4:	08 c0       	rjmp	.+16     	; 0x4e6 <LCD_sendNumber+0x5c>
	}
	else if (number==0)
     4d6:	c1 14       	cp	r12, r1
     4d8:	d1 04       	cpc	r13, r1
     4da:	e1 04       	cpc	r14, r1
     4dc:	f1 04       	cpc	r15, r1
     4de:	19 f4       	brne	.+6      	; 0x4e6 <LCD_sendNumber+0x5c>
	{
		LCD_sendChar('0');
     4e0:	80 e3       	ldi	r24, 0x30	; 48
     4e2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_sendChar>
}



void LCD_sendNumber         (s32 number)
{
     4e6:	10 e0       	ldi	r17, 0x00	; 0
     4e8:	14 c0       	rjmp	.+40     	; 0x512 <LCD_sendNumber+0x88>
		LCD_sendChar('0');
		
	}
	while (number !=0)
	{
		reminder=number % 10; //2
     4ea:	c7 01       	movw	r24, r14
     4ec:	b6 01       	movw	r22, r12
     4ee:	2a e0       	ldi	r18, 0x0A	; 10
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__divmodsi4>
		arr[count]=reminder; //
     4fa:	e1 e0       	ldi	r30, 0x01	; 1
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	ec 0f       	add	r30, r28
     500:	fd 1f       	adc	r31, r29
     502:	e1 0f       	add	r30, r17
     504:	f1 1d       	adc	r31, r1
     506:	60 83       	st	Z, r22
		number=number/10;    //5
     508:	c2 2e       	mov	r12, r18
     50a:	d3 2e       	mov	r13, r19
     50c:	e4 2e       	mov	r14, r20
     50e:	f5 2e       	mov	r15, r21
		count++;
     510:	1f 5f       	subi	r17, 0xFF	; 255
	else if (number==0)
	{
		LCD_sendChar('0');
		
	}
	while (number !=0)
     512:	c1 14       	cp	r12, r1
     514:	d1 04       	cpc	r13, r1
     516:	e1 04       	cpc	r14, r1
     518:	f1 04       	cpc	r15, r1
     51a:	39 f7       	brne	.-50     	; 0x4ea <LCD_sendNumber+0x60>
		
	}
	

    s8 num_count;
	for(num_count =(count-1);num_count>=0;num_count--)//54321
     51c:	ff 24       	eor	r15, r15
     51e:	fa 94       	dec	r15
     520:	f1 0e       	add	r15, r17
     522:	0d c0       	rjmp	.+26     	; 0x53e <LCD_sendNumber+0xb4>
	{
		LCD_sendChar(arr[num_count]+'0');
     524:	e1 e0       	ldi	r30, 0x01	; 1
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	ec 0f       	add	r30, r28
     52a:	fd 1f       	adc	r31, r29
     52c:	ef 0d       	add	r30, r15
     52e:	f1 1d       	adc	r31, r1
     530:	f7 fc       	sbrc	r15, 7
     532:	fa 95       	dec	r31
     534:	80 81       	ld	r24, Z
     536:	80 5d       	subi	r24, 0xD0	; 208
     538:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_sendChar>
		
	}
	

    s8 num_count;
	for(num_count =(count-1);num_count>=0;num_count--)//54321
     53c:	fa 94       	dec	r15
     53e:	ff 20       	and	r15, r15
     540:	8c f7       	brge	.-30     	; 0x524 <LCD_sendNumber+0x9a>
		
	}
	
	
	
     542:	60 96       	adiw	r28, 0x10	; 16
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	ff 90       	pop	r15
     556:	ef 90       	pop	r14
     558:	df 90       	pop	r13
     55a:	cf 90       	pop	r12
     55c:	08 95       	ret

0000055e <SRVM_init>:


void SRVM_off(void)
{
	/* TMR1 stop */
	TMR1_stop ();
     55e:	41 e0       	ldi	r20, 0x01	; 1
     560:	65 e0       	ldi	r22, 0x05	; 5
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
     568:	0e 94 22 07 	call	0xe44	; 0xe44 <TMR1_init>
     56c:	08 95       	ret

0000056e <SRVM_mapValue>:



// Mapping function to map values from one range to another
void SRVM_mapValue(f32 value, f32 fromMin, f32 fromMax, f32 toMin,f32 toMax,f32* returned_value) 
{
     56e:	2f 92       	push	r2
     570:	3f 92       	push	r3
     572:	4f 92       	push	r4
     574:	5f 92       	push	r5
     576:	6f 92       	push	r6
     578:	7f 92       	push	r7
     57a:	8f 92       	push	r8
     57c:	9f 92       	push	r9
     57e:	af 92       	push	r10
     580:	bf 92       	push	r11
     582:	cf 92       	push	r12
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	00 d0       	rcall	.+0      	; 0x594 <SRVM_mapValue+0x26>
     594:	00 d0       	rcall	.+0      	; 0x596 <SRVM_mapValue+0x28>
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	56 2e       	mov	r5, r22
     59c:	47 2e       	mov	r4, r23
     59e:	38 2e       	mov	r3, r24
     5a0:	29 2e       	mov	r2, r25
     5a2:	92 2e       	mov	r9, r18
     5a4:	83 2e       	mov	r8, r19
     5a6:	74 2e       	mov	r7, r20
     5a8:	65 2e       	mov	r6, r21
	// Ensure that the input value is within the input range
	if (value < fromMin) {
     5aa:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__cmpsf2>
     5ae:	88 23       	and	r24, r24
     5b0:	6c f0       	brlt	.+26     	; 0x5cc <SRVM_mapValue+0x5e>
		value = fromMin;
		} else if (value > fromMax) {
     5b2:	2e 2d       	mov	r18, r14
     5b4:	3f 2d       	mov	r19, r15
     5b6:	40 2f       	mov	r20, r16
     5b8:	51 2f       	mov	r21, r17
     5ba:	65 2d       	mov	r22, r5
     5bc:	74 2d       	mov	r23, r4
     5be:	83 2d       	mov	r24, r3
     5c0:	92 2d       	mov	r25, r2
     5c2:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__gesf2>
     5c6:	18 16       	cp	r1, r24
     5c8:	34 f0       	brlt	.+12     	; 0x5d6 <SRVM_mapValue+0x68>
     5ca:	09 c0       	rjmp	.+18     	; 0x5de <SRVM_mapValue+0x70>
// Mapping function to map values from one range to another
void SRVM_mapValue(f32 value, f32 fromMin, f32 fromMax, f32 toMin,f32 toMax,f32* returned_value) 
{
	// Ensure that the input value is within the input range
	if (value < fromMin) {
		value = fromMin;
     5cc:	59 2c       	mov	r5, r9
     5ce:	48 2c       	mov	r4, r8
     5d0:	37 2c       	mov	r3, r7
     5d2:	26 2c       	mov	r2, r6
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <SRVM_mapValue+0x70>
		} else if (value > fromMax) {
		value = fromMax;
     5d6:	5e 2c       	mov	r5, r14
     5d8:	4f 2c       	mov	r4, r15
     5da:	30 2e       	mov	r3, r16
     5dc:	21 2e       	mov	r2, r17
	}

	// Calculate the mapped value in the output range
	*returned_value = toMin + (value - fromMin) * (toMax - toMin) / (fromMax - fromMin);
     5de:	29 2d       	mov	r18, r9
     5e0:	38 2d       	mov	r19, r8
     5e2:	47 2d       	mov	r20, r7
     5e4:	56 2d       	mov	r21, r6
     5e6:	65 2d       	mov	r22, r5
     5e8:	74 2d       	mov	r23, r4
     5ea:	83 2d       	mov	r24, r3
     5ec:	92 2d       	mov	r25, r2
     5ee:	0e 94 11 08 	call	0x1022	; 0x1022 <__subsf3>
     5f2:	1b 01       	movw	r2, r22
     5f4:	2c 01       	movw	r4, r24
     5f6:	a6 01       	movw	r20, r12
     5f8:	95 01       	movw	r18, r10
     5fa:	69 8d       	ldd	r22, Y+25	; 0x19
     5fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     600:	9c 8d       	ldd	r25, Y+28	; 0x1c
     602:	0e 94 11 08 	call	0x1022	; 0x1022 <__subsf3>
     606:	9b 01       	movw	r18, r22
     608:	ac 01       	movw	r20, r24
     60a:	c2 01       	movw	r24, r4
     60c:	b1 01       	movw	r22, r2
     60e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__mulsf3>
     612:	69 83       	std	Y+1, r22	; 0x01
     614:	7a 83       	std	Y+2, r23	; 0x02
     616:	8b 83       	std	Y+3, r24	; 0x03
     618:	9c 83       	std	Y+4, r25	; 0x04
     61a:	29 2d       	mov	r18, r9
     61c:	38 2d       	mov	r19, r8
     61e:	47 2d       	mov	r20, r7
     620:	56 2d       	mov	r21, r6
     622:	6e 2d       	mov	r22, r14
     624:	7f 2d       	mov	r23, r15
     626:	80 2f       	mov	r24, r16
     628:	91 2f       	mov	r25, r17
     62a:	0e 94 11 08 	call	0x1022	; 0x1022 <__subsf3>
     62e:	9b 01       	movw	r18, r22
     630:	ac 01       	movw	r20, r24
     632:	69 81       	ldd	r22, Y+1	; 0x01
     634:	7a 81       	ldd	r23, Y+2	; 0x02
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	9c 81       	ldd	r25, Y+4	; 0x04
     63a:	0e 94 83 08 	call	0x1106	; 0x1106 <__divsf3>
     63e:	9b 01       	movw	r18, r22
     640:	ac 01       	movw	r20, r24
     642:	c6 01       	movw	r24, r12
     644:	b5 01       	movw	r22, r10
     646:	0e 94 12 08 	call	0x1024	; 0x1024 <__addsf3>
     64a:	ed 8d       	ldd	r30, Y+29	; 0x1d
     64c:	fe 8d       	ldd	r31, Y+30	; 0x1e
     64e:	60 83       	st	Z, r22
     650:	71 83       	std	Z+1, r23	; 0x01
     652:	82 83       	std	Z+2, r24	; 0x02
     654:	93 83       	std	Z+3, r25	; 0x03
     
}
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	ff 90       	pop	r15
     668:	ef 90       	pop	r14
     66a:	df 90       	pop	r13
     66c:	cf 90       	pop	r12
     66e:	bf 90       	pop	r11
     670:	af 90       	pop	r10
     672:	9f 90       	pop	r9
     674:	8f 90       	pop	r8
     676:	7f 90       	pop	r7
     678:	6f 90       	pop	r6
     67a:	5f 90       	pop	r5
     67c:	4f 90       	pop	r4
     67e:	3f 90       	pop	r3
     680:	2f 90       	pop	r2
     682:	08 95       	ret

00000684 <SRVM_on>:
	TMR1_init();
}


void SRVM_on(s8 angle)
{
     684:	af 92       	push	r10
     686:	bf 92       	push	r11
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	00 d0       	rcall	.+0      	; 0x69a <SRVM_on+0x16>
     69a:	00 d0       	rcall	.+0      	; 0x69c <SRVM_on+0x18>
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
    u8 pwm_freq_HZ= 50;
	
	/* Set pwm duty cycle between 5 : 10
	 depend on desired angle(0 : 180)*/
    f32 dutyCycle;
	SRVM_mapValue(angle,-90,90,5,10,& dutyCycle);
     6a0:	68 2f       	mov	r22, r24
     6a2:	88 0f       	add	r24, r24
     6a4:	77 0b       	sbc	r23, r23
     6a6:	88 0b       	sbc	r24, r24
     6a8:	99 0b       	sbc	r25, r25
     6aa:	0e 94 2d 09 	call	0x125a	; 0x125a <__floatsisf>
     6ae:	9e 01       	movw	r18, r28
     6b0:	2f 5f       	subi	r18, 0xFF	; 255
     6b2:	3f 4f       	sbci	r19, 0xFF	; 255
     6b4:	3f 93       	push	r19
     6b6:	2f 93       	push	r18
     6b8:	21 e4       	ldi	r18, 0x41	; 65
     6ba:	2f 93       	push	r18
     6bc:	20 e2       	ldi	r18, 0x20	; 32
     6be:	2f 93       	push	r18
     6c0:	1f 92       	push	r1
     6c2:	1f 92       	push	r1
     6c4:	0f 2e       	mov	r0, r31
     6c6:	a1 2c       	mov	r10, r1
     6c8:	b1 2c       	mov	r11, r1
     6ca:	f0 ea       	ldi	r31, 0xA0	; 160
     6cc:	cf 2e       	mov	r12, r31
     6ce:	f0 e4       	ldi	r31, 0x40	; 64
     6d0:	df 2e       	mov	r13, r31
     6d2:	f0 2d       	mov	r31, r0
     6d4:	e1 2c       	mov	r14, r1
     6d6:	f1 2c       	mov	r15, r1
     6d8:	04 eb       	ldi	r16, 0xB4	; 180
     6da:	12 e4       	ldi	r17, 0x42	; 66
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	44 eb       	ldi	r20, 0xB4	; 180
     6e2:	52 ec       	ldi	r21, 0xC2	; 194
     6e4:	0e 94 b7 02 	call	0x56e	; 0x56e <SRVM_mapValue>
	
	TMR1_setFastPWM_usingMode14( dutyCycle, pwm_freq_HZ);
     6e8:	69 81       	ldd	r22, Y+1	; 0x01
     6ea:	7a 81       	ldd	r23, Y+2	; 0x02
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	9c 81       	ldd	r25, Y+4	; 0x04
     6f0:	42 e3       	ldi	r20, 0x32	; 50
     6f2:	50 e0       	ldi	r21, 0x00	; 0
     6f4:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TMR1_setFastPWM_usingMode14>
    

	/* TMR1 start */
	TMR1_start();
     6f8:	0e 94 35 07 	call	0xe6a	; 0xe6a <TMR1_start>

}
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	ef 90       	pop	r14
     71c:	df 90       	pop	r13
     71e:	cf 90       	pop	r12
     720:	bf 90       	pop	r11
     722:	af 90       	pop	r10
     724:	08 95       	ret

00000726 <EXTI_action>:


void EXTI_action(void)                                       // call back function
{
	
	if (exit_count<=2)          // check for counter status
     726:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     72a:	83 30       	cpi	r24, 0x03	; 3
     72c:	08 f0       	brcs	.+2      	; 0x730 <EXTI_action+0xa>
     72e:	65 c0       	rjmp	.+202    	; 0x7fa <EXTI_action+0xd4>
	{						    
 		if (exit_count==1)      // check if it is the first entry
     730:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	99 f4       	brne	.+38     	; 0x75e <EXTI_action+0x38>
		{
			// store the start time value
			start_time=TCNT0;   
     738:	82 b7       	in	r24, 0x32	; 50
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <start_time+0x1>
     740:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <start_time>
			
			// store number of OVFs at the start of the signal
			ovfCounter_start=OvfCounter; 
     744:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <OvfCounter>
     748:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <OvfCounter+0x1>
     74c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <ovfCounter_start+0x1>
     750:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <ovfCounter_start>
			
			// at the first entry  we change the capture edge to falling edge to capture echo signal
			EXTI_enable(EXTI_INT0,EXTI_FALLING_EDGE);
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 1f 06 	call	0xc3e	; 0xc3e <EXTI_enable>
     75c:	49 c0       	rjmp	.+146    	; 0x7f0 <EXTI_action+0xca>
			
		}
		
		else if(exit_count==2) // check if it's the second entry
     75e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     762:	82 30       	cpi	r24, 0x02	; 2
     764:	09 f0       	breq	.+2      	; 0x768 <EXTI_action+0x42>
     766:	44 c0       	rjmp	.+136    	; 0x7f0 <EXTI_action+0xca>
		{   
			//store end time value
			end_time=TCNT0;
     768:	82 b7       	in	r24, 0x32	; 50
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <end_time+0x1>
     770:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <end_time>
			
			//store number of OVFs at the end of signal
			ovfCounter_end=OvfCounter;
     774:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <OvfCounter>
     778:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <OvfCounter+0x1>
     77c:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <ovfCounter_end+0x1>
     780:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <ovfCounter_end>
			
			//calculate the time difference between start and end
			timeDiff=(end_time+(256*ovfCounter_end))-(start_time+(256*ovfCounter_start));
     784:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <ovfCounter_end>
     788:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <ovfCounter_end+0x1>
     78c:	98 2f       	mov	r25, r24
     78e:	88 27       	eor	r24, r24
     790:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <end_time>
     794:	30 91 9d 00 	lds	r19, 0x009D	; 0x80009d <end_time+0x1>
     798:	82 0f       	add	r24, r18
     79a:	93 1f       	adc	r25, r19
     79c:	20 91 ba 00 	lds	r18, 0x00BA	; 0x8000ba <ovfCounter_start>
     7a0:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <ovfCounter_start+0x1>
     7a4:	32 2f       	mov	r19, r18
     7a6:	22 27       	eor	r18, r18
     7a8:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <start_time>
     7ac:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <start_time+0x1>
     7b0:	24 0f       	add	r18, r20
     7b2:	35 1f       	adc	r19, r21
     7b4:	82 1b       	sub	r24, r18
     7b6:	93 0b       	sbc	r25, r19
     7b8:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__data_end+0x1>
     7bc:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__data_end>
			
			//calculate the distance
			distance=timeDiff*0.068;// 	f32 ton=(h*(64/16000000))/2 >> 	*distance=ton*34000;
     7c0:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <__data_end>
     7c4:	70 91 9b 00 	lds	r23, 0x009B	; 0x80009b <__data_end+0x1>
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 2b 09 	call	0x1256	; 0x1256 <__floatunsisf>
     7d0:	26 e9       	ldi	r18, 0x96	; 150
     7d2:	33 e4       	ldi	r19, 0x43	; 67
     7d4:	4b e8       	ldi	r20, 0x8B	; 139
     7d6:	5d e3       	ldi	r21, 0x3D	; 61
     7d8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__mulsf3>
     7dc:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <distance>
     7e0:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <distance+0x1>
     7e4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <distance+0x2>
     7e8:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <distance+0x3>
			
		    //reset the counter to calculate new signal
			exit_count=0;
     7ec:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			
		}
        
		//increase the counter to sync with the entry state
		exit_count++;
     7f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     7fa:	08 95       	ret

000007fc <ultrasonic_init>:
volatile  u16 ovfCounter_start,ovfCounter_end;
extern volatile   u16 OvfCounter;

void ultrasonic_init(void)
{
	DIO_setPinDirection(ECHO_PORT,ECHO_PIN,DIO_PIN_INPUT);      // trigger 
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	62 e0       	ldi	r22, 0x02	; 2
     800:	83 e0       	ldi	r24, 0x03	; 3
     802:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
	DIO_setPinDirection(TRIGGER_PORT,DIO_PIN0,DIO_PIN_OUTPUT);  // echo
     806:	41 e0       	ldi	r20, 0x01	; 1
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_setPinDirection>
	EXTI_setCallBack(&EXTI_action);                             // external interrupt call back 
     810:	83 e9       	ldi	r24, 0x93	; 147
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	0e 94 84 06 	call	0xd08	; 0xd08 <EXTI_setCallBack>
     818:	08 95       	ret

0000081a <ultrasonic_sendTrigger>:
}

void ultrasonic_sendTrigger(void)
{
	DIO_setPinValue(TRIGGER_PORT,TRIGGER_PIN,DIO_PIN_HIGH);    // high 
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     824:	85 e3       	ldi	r24, 0x35	; 53
     826:	8a 95       	dec	r24
     828:	f1 f7       	brne	.-4      	; 0x826 <ultrasonic_sendTrigger+0xc>
     82a:	00 00       	nop
	_delay_us(10);                                             // 10 micro seconds delay
	DIO_setPinValue(TRIGGER_PORT,TRIGGER_PIN,DIO_PIN_LOW);     // low
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	83 e0       	ldi	r24, 0x03	; 3
     832:	0e 94 a9 05 	call	0xb52	; 0xb52 <DIO_setPinValue>
     836:	08 95       	ret

00000838 <ultrasonic_get_Distance>:
}

void ultrasonic_get_Distance(f32* returned_distance)
{
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	ec 01       	movw	r28, r24
	ultrasonic_sendTrigger();                                  // send trigger
     83e:	0e 94 0d 04 	call	0x81a	; 0x81a <ultrasonic_sendTrigger>
	EXTI_enable(EXTI_INT0,EXTI_RISING_EDGE);                   // set external interrupt for rising edge
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 1f 06 	call	0xc3e	; 0xc3e <EXTI_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     84a:	2f ef       	ldi	r18, 0xFF	; 255
     84c:	80 e7       	ldi	r24, 0x70	; 112
     84e:	92 e0       	ldi	r25, 0x02	; 2
     850:	21 50       	subi	r18, 0x01	; 1
     852:	80 40       	sbci	r24, 0x00	; 0
     854:	90 40       	sbci	r25, 0x00	; 0
     856:	e1 f7       	brne	.-8      	; 0x850 <ultrasonic_get_Distance+0x18>
     858:	00 c0       	rjmp	.+0      	; 0x85a <ultrasonic_get_Distance+0x22>
     85a:	00 00       	nop
	_delay_ms(50);                                             // stability delay
	*returned_distance=distance;                               // get the distance
     85c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <distance>
     860:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <distance+0x1>
     864:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <distance+0x2>
     868:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <distance+0x3>
     86c:	88 83       	st	Y, r24
     86e:	99 83       	std	Y+1, r25	; 0x01
     870:	aa 83       	std	Y+2, r26	; 0x02
     872:	bb 83       	std	Y+3, r27	; 0x03
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <main>:

#define  stop_distance 30 


int main(void)
{
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	00 d0       	rcall	.+0      	; 0x880 <main+0x6>
     880:	00 d0       	rcall	.+0      	; 0x882 <main+0x8>
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
	f32 distance;                      //measured distance
    f32 distance_Right,distance_Left;  //left and right measured distance 
  
  //initializations 
	GI_enable();
     886:	0e 94 b4 06 	call	0xd68	; 0xd68 <GI_enable>
	ultrasonic_init();
     88a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <ultrasonic_init>
    LCD_init();
     88e:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_init>
    TMR0_init();
     892:	0e 94 b8 06 	call	0xd70	; 0xd70 <TMR0_init>
    TMR0_start();
     896:	0e 94 c4 06 	call	0xd88	; 0xd88 <TMR0_start>
    DCM_init(DCM_A);
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	0e 94 49 00 	call	0x92	; 0x92 <DCM_init>
    DCM_init(DCM_B);
     8a0:	82 e0       	ldi	r24, 0x02	; 2
     8a2:	0e 94 49 00 	call	0x92	; 0x92 <DCM_init>
	SRVM_init();
     8a6:	0e 94 af 02 	call	0x55e	; 0x55e <SRVM_init>
	
	
	SRVM_on(0);         // reset servo motor for zero position (forward position)
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	0e 94 42 03 	call	0x684	; 0x684 <SRVM_on>
     8b0:	2f ef       	ldi	r18, 0xFF	; 255
     8b2:	83 ed       	ldi	r24, 0xD3	; 211
     8b4:	90 e3       	ldi	r25, 0x30	; 48
     8b6:	21 50       	subi	r18, 0x01	; 1
     8b8:	80 40       	sbci	r24, 0x00	; 0
     8ba:	90 40       	sbci	r25, 0x00	; 0
     8bc:	e1 f7       	brne	.-8      	; 0x8b6 <main+0x3c>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <main+0x46>
     8c0:	00 00       	nop
    
    while(1)
    {
	    
		  // sensor reads
          ultrasonic_get_Distance(&distance);
     8c2:	ce 01       	movw	r24, r28
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	0e 94 1c 04 	call	0x838	; 0x838 <ultrasonic_get_Distance>
	    
		  //display the readings
	      LCD_clear();
     8ca:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_clear>
	      LCD_sendString((u8*)"distance:");
     8ce:	81 e6       	ldi	r24, 0x61	; 97
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 28 02 	call	0x450	; 0x450 <LCD_sendString>
	      LCD_sendNumber(distance);
     8d6:	69 81       	ldd	r22, Y+1	; 0x01
     8d8:	7a 81       	ldd	r23, Y+2	; 0x02
     8da:	8b 81       	ldd	r24, Y+3	; 0x03
     8dc:	9c 81       	ldd	r25, Y+4	; 0x04
     8de:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fixsfsi>
     8e2:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_sendNumber>
	      LCD_sendString((u8*)" cm");
     8e6:	8b e6       	ldi	r24, 0x6B	; 107
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 28 02 	call	0x450	; 0x450 <LCD_sendString>
     8ee:	2f ef       	ldi	r18, 0xFF	; 255
     8f0:	84 e3       	ldi	r24, 0x34	; 52
     8f2:	9c e0       	ldi	r25, 0x0C	; 12
     8f4:	21 50       	subi	r18, 0x01	; 1
     8f6:	80 40       	sbci	r24, 0x00	; 0
     8f8:	90 40       	sbci	r25, 0x00	; 0
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <main+0x7a>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <main+0x84>
     8fe:	00 00       	nop
	      _delay_ms(250);
	      LCD_clear();
     900:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_clear>
		
		
          // check for the measured distance
          if(distance>stop_distance)
     904:	c9 80       	ldd	r12, Y+1	; 0x01
     906:	da 80       	ldd	r13, Y+2	; 0x02
     908:	eb 80       	ldd	r14, Y+3	; 0x03
     90a:	fc 80       	ldd	r15, Y+4	; 0x04
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 ef       	ldi	r20, 0xF0	; 240
     912:	51 e4       	ldi	r21, 0x41	; 65
     914:	c7 01       	movw	r24, r14
     916:	b6 01       	movw	r22, r12
     918:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__gesf2>
     91c:	18 16       	cp	r1, r24
     91e:	1c f4       	brge	.+6      	; 0x926 <main+0xac>
          {
	          //safe distance ---> move forword
	          DCM_Car_Move_Forward();
     920:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DCM_Car_Move_Forward>
     924:	ce cf       	rjmp	.-100    	; 0x8c2 <main+0x48>
	          
          }
          
          
          else if(distance<=stop_distance)
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 ef       	ldi	r20, 0xF0	; 240
     92c:	51 e4       	ldi	r21, 0x41	; 65
     92e:	c7 01       	movw	r24, r14
     930:	b6 01       	movw	r22, r12
     932:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__cmpsf2>
     936:	18 16       	cp	r1, r24
     938:	24 f2       	brlt	.-120    	; 0x8c2 <main+0x48>
          {
            //unsafe distance ---> stop
			DCM_Car_Stop();
     93a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DCM_Car_Stop>
           
		   
		    //Sudden obstacle 
			if (distance<10)  
     93e:	69 81       	ldd	r22, Y+1	; 0x01
     940:	7a 81       	ldd	r23, Y+2	; 0x02
     942:	8b 81       	ldd	r24, Y+3	; 0x03
     944:	9c 81       	ldd	r25, Y+4	; 0x04
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	40 e2       	ldi	r20, 0x20	; 32
     94c:	51 e4       	ldi	r21, 0x41	; 65
     94e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__cmpsf2>
     952:	88 23       	and	r24, r24
     954:	6c f4       	brge	.+26     	; 0x970 <main+0xf6>
            {
                DCM_Car_Move_Back();//go back to safe distance
     956:	0e 94 13 01 	call	0x226	; 0x226 <DCM_Car_Move_Back>
     95a:	2f ef       	ldi	r18, 0xFF	; 255
     95c:	89 e6       	ldi	r24, 0x69	; 105
     95e:	98 e1       	ldi	r25, 0x18	; 24
     960:	21 50       	subi	r18, 0x01	; 1
     962:	80 40       	sbci	r24, 0x00	; 0
     964:	90 40       	sbci	r25, 0x00	; 0
     966:	e1 f7       	brne	.-8      	; 0x960 <main+0xe6>
     968:	00 c0       	rjmp	.+0      	; 0x96a <main+0xf0>
     96a:	00 00       	nop
                _delay_ms(500); 
				DCM_Car_Stop();
     96c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DCM_Car_Stop>
            }
           
	
			//Look at left direction
            SRVM_on(90);
     970:	8a e5       	ldi	r24, 0x5A	; 90
     972:	0e 94 42 03 	call	0x684	; 0x684 <SRVM_on>
     976:	2f ef       	ldi	r18, 0xFF	; 255
     978:	83 ed       	ldi	r24, 0xD3	; 211
     97a:	90 e3       	ldi	r25, 0x30	; 48
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	80 40       	sbci	r24, 0x00	; 0
     980:	90 40       	sbci	r25, 0x00	; 0
     982:	e1 f7       	brne	.-8      	; 0x97c <main+0x102>
     984:	00 c0       	rjmp	.+0      	; 0x986 <main+0x10c>
     986:	00 00       	nop
            _delay_ms(1000);
			
		
			//sensor reads
			ultrasonic_get_Distance(&distance);
     988:	ce 01       	movw	r24, r28
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	0e 94 1c 04 	call	0x838	; 0x838 <ultrasonic_get_Distance>
			
			//store it at left distance variable
            distance_Left=distance;
     990:	c9 80       	ldd	r12, Y+1	; 0x01
     992:	da 80       	ldd	r13, Y+2	; 0x02
     994:	eb 80       	ldd	r14, Y+3	; 0x03
     996:	fc 80       	ldd	r15, Y+4	; 0x04
			
			//display the stable reading
			LCD_sendString((u8*)"L-dist.:");
     998:	8f e6       	ldi	r24, 0x6F	; 111
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 28 02 	call	0x450	; 0x450 <LCD_sendString>
			LCD_sendNumber(distance_Left);
     9a0:	c7 01       	movw	r24, r14
     9a2:	b6 01       	movw	r22, r12
     9a4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fixsfsi>
     9a8:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_sendNumber>
			LCD_sendString((u8*)" cm");
     9ac:	8b e6       	ldi	r24, 0x6B	; 107
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 28 02 	call	0x450	; 0x450 <LCD_sendString>
     9b4:	2f ef       	ldi	r18, 0xFF	; 255
     9b6:	89 e6       	ldi	r24, 0x69	; 105
     9b8:	98 e1       	ldi	r25, 0x18	; 24
     9ba:	21 50       	subi	r18, 0x01	; 1
     9bc:	80 40       	sbci	r24, 0x00	; 0
     9be:	90 40       	sbci	r25, 0x00	; 0
     9c0:	e1 f7       	brne	.-8      	; 0x9ba <main+0x140>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <main+0x14a>
     9c4:	00 00       	nop
            _delay_ms(500);
          
		    // Look at Right direction
		    SRVM_on(-90);
     9c6:	86 ea       	ldi	r24, 0xA6	; 166
     9c8:	0e 94 42 03 	call	0x684	; 0x684 <SRVM_on>
     9cc:	2f ef       	ldi	r18, 0xFF	; 255
     9ce:	83 ed       	ldi	r24, 0xD3	; 211
     9d0:	90 e3       	ldi	r25, 0x30	; 48
     9d2:	21 50       	subi	r18, 0x01	; 1
     9d4:	80 40       	sbci	r24, 0x00	; 0
     9d6:	90 40       	sbci	r25, 0x00	; 0
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <main+0x158>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <main+0x162>
     9dc:	00 00       	nop
            _delay_ms(1000);
         
			//sensor reads
			ultrasonic_get_Distance(&distance);
     9de:	ce 01       	movw	r24, r28
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	0e 94 1c 04 	call	0x838	; 0x838 <ultrasonic_get_Distance>
			
	    	//store it at right distance variable	
            distance_Right=distance;
     9e6:	89 80       	ldd	r8, Y+1	; 0x01
     9e8:	9a 80       	ldd	r9, Y+2	; 0x02
     9ea:	ab 80       	ldd	r10, Y+3	; 0x03
     9ec:	bc 80       	ldd	r11, Y+4	; 0x04
	    	
			//display the stable reading
			LCD_clear();
     9ee:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_clear>
	    	LCD_sendString((u8*)"R-dist.:");
     9f2:	88 e7       	ldi	r24, 0x78	; 120
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 28 02 	call	0x450	; 0x450 <LCD_sendString>
	    	LCD_sendNumber(distance_Right);
     9fa:	c5 01       	movw	r24, r10
     9fc:	b4 01       	movw	r22, r8
     9fe:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fixsfsi>
     a02:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_sendNumber>
	    	LCD_sendString((u8*)" cm");
     a06:	8b e6       	ldi	r24, 0x6B	; 107
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 28 02 	call	0x450	; 0x450 <LCD_sendString>
     a0e:	2f ef       	ldi	r18, 0xFF	; 255
     a10:	89 e6       	ldi	r24, 0x69	; 105
     a12:	98 e1       	ldi	r25, 0x18	; 24
     a14:	21 50       	subi	r18, 0x01	; 1
     a16:	80 40       	sbci	r24, 0x00	; 0
     a18:	90 40       	sbci	r25, 0x00	; 0
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <main+0x19a>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <main+0x1a4>
     a1e:	00 00       	nop
            _delay_ms(500);
	    	LCD_clear();
     a20:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_clear>
	    	
			// reset the servo position (forward position)
			SRVM_on(0);
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	0e 94 42 03 	call	0x684	; 0x684 <SRVM_on>
			
			//compare the two distances if the left obstacle is farther than right obstacle --> move left
		    if (distance_Left>distance_Right)
     a2a:	a5 01       	movw	r20, r10
     a2c:	94 01       	movw	r18, r8
     a2e:	c7 01       	movw	r24, r14
     a30:	b6 01       	movw	r22, r12
     a32:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__gesf2>
     a36:	18 16       	cp	r1, r24
     a38:	5c f4       	brge	.+22     	; 0xa50 <main+0x1d6>
			{
            
			//display that the car will move to the left
			LCD_clear();
     a3a:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_clear>
			LCD_sendString((u8*)"Moving Left");
     a3e:	81 e8       	ldi	r24, 0x81	; 129
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 28 02 	call	0x450	; 0x450 <LCD_sendString>
           
		    //move the car to the left
		    DCM_Car_Move_Left_90();
     a46:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DCM_Car_Move_Left_90>
			LCD_clear();
     a4a:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_clear>
     a4e:	39 cf       	rjmp	.-398    	; 0x8c2 <main+0x48>
		   
           else 
           {
            
			//display that the car will move to the right 
			LCD_clear();
     a50:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_clear>
			LCD_sendString((u8*)"Moving Right");
     a54:	8d e8       	ldi	r24, 0x8D	; 141
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 28 02 	call	0x450	; 0x450 <LCD_sendString>
			
			//move the car to the right
            DCM_Car_Move_Right_90();
     a5c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DCM_Car_Move_Right_90>
			LCD_clear();
     a60:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_clear>
     a64:	2e cf       	rjmp	.-420    	; 0x8c2 <main+0x48>

00000a66 <DIO_setPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
	if((PortId<=3) && (PinId<=7) && ((PinDirection==DIO_PIN_OUTPUT)||(PinDirection==DIO_PIN_INPUT)))
     a66:	84 30       	cpi	r24, 0x04	; 4
     a68:	08 f0       	brcs	.+2      	; 0xa6c <DIO_setPinDirection+0x6>
     a6a:	72 c0       	rjmp	.+228    	; 0xb50 <DIO_setPinDirection+0xea>
     a6c:	68 30       	cpi	r22, 0x08	; 8
     a6e:	08 f0       	brcs	.+2      	; 0xa72 <DIO_setPinDirection+0xc>
     a70:	6f c0       	rjmp	.+222    	; 0xb50 <DIO_setPinDirection+0xea>
     a72:	42 30       	cpi	r20, 0x02	; 2
     a74:	08 f0       	brcs	.+2      	; 0xa78 <DIO_setPinDirection+0x12>
     a76:	6c c0       	rjmp	.+216    	; 0xb50 <DIO_setPinDirection+0xea>
	{
		switch(PortId)
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	01 f1       	breq	.+64     	; 0xabc <DIO_setPinDirection+0x56>
     a7c:	30 f0       	brcs	.+12     	; 0xa8a <DIO_setPinDirection+0x24>
     a7e:	82 30       	cpi	r24, 0x02	; 2
     a80:	b1 f1       	breq	.+108    	; 0xaee <DIO_setPinDirection+0x88>
     a82:	83 30       	cpi	r24, 0x03	; 3
     a84:	09 f4       	brne	.+2      	; 0xa88 <DIO_setPinDirection+0x22>
     a86:	4c c0       	rjmp	.+152    	; 0xb20 <DIO_setPinDirection+0xba>
     a88:	08 95       	ret
	    {
	    	case DIO_PORTA: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
     a8a:	41 30       	cpi	r20, 0x01	; 1
     a8c:	59 f4       	brne	.+22     	; 0xaa4 <DIO_setPinDirection+0x3e>
	    	{
	    		SET_BIT(DDRA,PinId);
     a8e:	2a b3       	in	r18, 0x1a	; 26
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <DIO_setPinDirection+0x34>
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	6a 95       	dec	r22
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <DIO_setPinDirection+0x30>
     a9e:	82 2b       	or	r24, r18
     aa0:	8a bb       	out	0x1a, r24	; 26
     aa2:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRA,PinId);
     aa4:	2a b3       	in	r18, 0x1a	; 26
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <DIO_setPinDirection+0x4a>
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	6a 95       	dec	r22
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <DIO_setPinDirection+0x46>
     ab4:	80 95       	com	r24
     ab6:	82 23       	and	r24, r18
     ab8:	8a bb       	out	0x1a, r24	; 26
     aba:	08 95       	ret
	    	}
	    	break;
	    	
	    	case DIO_PORTB: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
     abc:	41 30       	cpi	r20, 0x01	; 1
     abe:	59 f4       	brne	.+22     	; 0xad6 <DIO_setPinDirection+0x70>
	    	{
	    		SET_BIT(DDRB,PinId);
     ac0:	27 b3       	in	r18, 0x17	; 23
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <DIO_setPinDirection+0x66>
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	6a 95       	dec	r22
     ace:	e2 f7       	brpl	.-8      	; 0xac8 <DIO_setPinDirection+0x62>
     ad0:	82 2b       	or	r24, r18
     ad2:	87 bb       	out	0x17, r24	; 23
     ad4:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRB,PinId);
     ad6:	27 b3       	in	r18, 0x17	; 23
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <DIO_setPinDirection+0x7c>
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	6a 95       	dec	r22
     ae4:	e2 f7       	brpl	.-8      	; 0xade <DIO_setPinDirection+0x78>
     ae6:	80 95       	com	r24
     ae8:	82 23       	and	r24, r18
     aea:	87 bb       	out	0x17, r24	; 23
     aec:	08 95       	ret
	    	}
	    	break;
	    	
	    	case DIO_PORTC: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
     aee:	41 30       	cpi	r20, 0x01	; 1
     af0:	59 f4       	brne	.+22     	; 0xb08 <DIO_setPinDirection+0xa2>
	    	{
	    		SET_BIT(DDRC,PinId);
     af2:	24 b3       	in	r18, 0x14	; 20
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	02 c0       	rjmp	.+4      	; 0xafe <DIO_setPinDirection+0x98>
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	6a 95       	dec	r22
     b00:	e2 f7       	brpl	.-8      	; 0xafa <DIO_setPinDirection+0x94>
     b02:	82 2b       	or	r24, r18
     b04:	84 bb       	out	0x14, r24	; 20
     b06:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRC,PinId);
     b08:	24 b3       	in	r18, 0x14	; 20
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_setPinDirection+0xae>
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	6a 95       	dec	r22
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_setPinDirection+0xaa>
     b18:	80 95       	com	r24
     b1a:	82 23       	and	r24, r18
     b1c:	84 bb       	out	0x14, r24	; 20
     b1e:	08 95       	ret
	    	}
	    	break;
	    	
	    	case DIO_PORTD: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
     b20:	41 30       	cpi	r20, 0x01	; 1
     b22:	59 f4       	brne	.+22     	; 0xb3a <DIO_setPinDirection+0xd4>
	    	{
	    		SET_BIT(DDRD,PinId);
     b24:	21 b3       	in	r18, 0x11	; 17
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <DIO_setPinDirection+0xca>
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	6a 95       	dec	r22
     b32:	e2 f7       	brpl	.-8      	; 0xb2c <DIO_setPinDirection+0xc6>
     b34:	82 2b       	or	r24, r18
     b36:	81 bb       	out	0x11, r24	; 17
     b38:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRD,PinId);
     b3a:	21 b3       	in	r18, 0x11	; 17
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <DIO_setPinDirection+0xe0>
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	6a 95       	dec	r22
     b48:	e2 f7       	brpl	.-8      	; 0xb42 <DIO_setPinDirection+0xdc>
     b4a:	80 95       	com	r24
     b4c:	82 23       	and	r24, r18
     b4e:	81 bb       	out	0x11, r24	; 17
     b50:	08 95       	ret

00000b52 <DIO_setPinValue>:
}


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
	if((PortId<=3) && (PinId<=7) && ((PinValue==DIO_PIN_HIGH)||(PinValue==DIO_PIN_LOW)))
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	08 f0       	brcs	.+2      	; 0xb58 <DIO_setPinValue+0x6>
     b56:	72 c0       	rjmp	.+228    	; 0xc3c <DIO_setPinValue+0xea>
     b58:	68 30       	cpi	r22, 0x08	; 8
     b5a:	08 f0       	brcs	.+2      	; 0xb5e <DIO_setPinValue+0xc>
     b5c:	6f c0       	rjmp	.+222    	; 0xc3c <DIO_setPinValue+0xea>
     b5e:	42 30       	cpi	r20, 0x02	; 2
     b60:	08 f0       	brcs	.+2      	; 0xb64 <DIO_setPinValue+0x12>
     b62:	6c c0       	rjmp	.+216    	; 0xc3c <DIO_setPinValue+0xea>
	{
		switch(PortId)
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	01 f1       	breq	.+64     	; 0xba8 <DIO_setPinValue+0x56>
     b68:	30 f0       	brcs	.+12     	; 0xb76 <DIO_setPinValue+0x24>
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	b1 f1       	breq	.+108    	; 0xbda <DIO_setPinValue+0x88>
     b6e:	83 30       	cpi	r24, 0x03	; 3
     b70:	09 f4       	brne	.+2      	; 0xb74 <DIO_setPinValue+0x22>
     b72:	4c c0       	rjmp	.+152    	; 0xc0c <DIO_setPinValue+0xba>
     b74:	08 95       	ret
	    {
	    	case DIO_PORTA:
	    	if(DIO_PIN_HIGH == PinValue)
     b76:	41 30       	cpi	r20, 0x01	; 1
     b78:	59 f4       	brne	.+22     	; 0xb90 <DIO_setPinValue+0x3e>
	    	{
	    		SET_BIT(PORTA,PinId);
     b7a:	2b b3       	in	r18, 0x1b	; 27
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <DIO_setPinValue+0x34>
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	6a 95       	dec	r22
     b88:	e2 f7       	brpl	.-8      	; 0xb82 <DIO_setPinValue+0x30>
     b8a:	82 2b       	or	r24, r18
     b8c:	8b bb       	out	0x1b, r24	; 27
     b8e:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTA,PinId);
     b90:	2b b3       	in	r18, 0x1b	; 27
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <DIO_setPinValue+0x4a>
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	6a 95       	dec	r22
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <DIO_setPinValue+0x46>
     ba0:	80 95       	com	r24
     ba2:	82 23       	and	r24, r18
     ba4:	8b bb       	out	0x1b, r24	; 27
     ba6:	08 95       	ret
	    	}
	    	break;
	    	
	    	case DIO_PORTB:
	    	if(DIO_PIN_HIGH == PinValue)
     ba8:	41 30       	cpi	r20, 0x01	; 1
     baa:	59 f4       	brne	.+22     	; 0xbc2 <DIO_setPinValue+0x70>
	    	{
	    		SET_BIT(PORTB,PinId);
     bac:	28 b3       	in	r18, 0x18	; 24
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <DIO_setPinValue+0x66>
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	6a 95       	dec	r22
     bba:	e2 f7       	brpl	.-8      	; 0xbb4 <DIO_setPinValue+0x62>
     bbc:	82 2b       	or	r24, r18
     bbe:	88 bb       	out	0x18, r24	; 24
     bc0:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTB,PinId);
     bc2:	28 b3       	in	r18, 0x18	; 24
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_setPinValue+0x7c>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	6a 95       	dec	r22
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <DIO_setPinValue+0x78>
     bd2:	80 95       	com	r24
     bd4:	82 23       	and	r24, r18
     bd6:	88 bb       	out	0x18, r24	; 24
     bd8:	08 95       	ret
	    	}
	    	break;
	    	
	    	case DIO_PORTC:
	    	if(DIO_PIN_HIGH == PinValue)
     bda:	41 30       	cpi	r20, 0x01	; 1
     bdc:	59 f4       	brne	.+22     	; 0xbf4 <DIO_setPinValue+0xa2>
	    	{
	    		SET_BIT(PORTC,PinId);
     bde:	25 b3       	in	r18, 0x15	; 21
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 c0       	rjmp	.+4      	; 0xbea <DIO_setPinValue+0x98>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	6a 95       	dec	r22
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <DIO_setPinValue+0x94>
     bee:	82 2b       	or	r24, r18
     bf0:	85 bb       	out	0x15, r24	; 21
     bf2:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTC,PinId);
     bf4:	25 b3       	in	r18, 0x15	; 21
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <DIO_setPinValue+0xae>
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	6a 95       	dec	r22
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <DIO_setPinValue+0xaa>
     c04:	80 95       	com	r24
     c06:	82 23       	and	r24, r18
     c08:	85 bb       	out	0x15, r24	; 21
     c0a:	08 95       	ret
	    	}
	    	break;
	    	
	    	case DIO_PORTD:
	    	if(DIO_PIN_HIGH == PinValue)
     c0c:	41 30       	cpi	r20, 0x01	; 1
     c0e:	59 f4       	brne	.+22     	; 0xc26 <DIO_setPinValue+0xd4>
	    	{
	    		SET_BIT(PORTD,PinId);
     c10:	22 b3       	in	r18, 0x12	; 18
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_setPinValue+0xca>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	6a 95       	dec	r22
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <DIO_setPinValue+0xc6>
     c20:	82 2b       	or	r24, r18
     c22:	82 bb       	out	0x12, r24	; 18
     c24:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTD,PinId);
     c26:	22 b3       	in	r18, 0x12	; 18
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <DIO_setPinValue+0xe0>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	6a 95       	dec	r22
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <DIO_setPinValue+0xdc>
     c36:	80 95       	com	r24
     c38:	82 23       	and	r24, r18
     c3a:	82 bb       	out	0x12, r24	; 18
     c3c:	08 95       	ret

00000c3e <EXTI_enable>:
		break;
		case EXTI_INT1:
		CLR_BIT(GICR,INT1);
		break;
		case EXTI_INT2:
		CLR_BIT(GICR,INT2);
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	61 f1       	breq	.+88     	; 0xc9a <EXTI_enable+0x5c>
     c42:	20 f0       	brcs	.+8      	; 0xc4c <EXTI_enable+0xe>
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	09 f4       	brne	.+2      	; 0xc4a <EXTI_enable+0xc>
     c48:	4f c0       	rjmp	.+158    	; 0xce8 <EXTI_enable+0xaa>
     c4a:	08 95       	ret
     c4c:	61 30       	cpi	r22, 0x01	; 1
     c4e:	69 f0       	breq	.+26     	; 0xc6a <EXTI_enable+0x2c>
     c50:	28 f0       	brcs	.+10     	; 0xc5c <EXTI_enable+0x1e>
     c52:	62 30       	cpi	r22, 0x02	; 2
     c54:	89 f0       	breq	.+34     	; 0xc78 <EXTI_enable+0x3a>
     c56:	63 30       	cpi	r22, 0x03	; 3
     c58:	b1 f0       	breq	.+44     	; 0xc86 <EXTI_enable+0x48>
     c5a:	1b c0       	rjmp	.+54     	; 0xc92 <EXTI_enable+0x54>
     c5c:	85 b7       	in	r24, 0x35	; 53
     c5e:	81 60       	ori	r24, 0x01	; 1
     c60:	85 bf       	out	0x35, r24	; 53
     c62:	85 b7       	in	r24, 0x35	; 53
     c64:	82 60       	ori	r24, 0x02	; 2
     c66:	85 bf       	out	0x35, r24	; 53
     c68:	14 c0       	rjmp	.+40     	; 0xc92 <EXTI_enable+0x54>
     c6a:	85 b7       	in	r24, 0x35	; 53
     c6c:	8e 7f       	andi	r24, 0xFE	; 254
     c6e:	85 bf       	out	0x35, r24	; 53
     c70:	85 b7       	in	r24, 0x35	; 53
     c72:	82 60       	ori	r24, 0x02	; 2
     c74:	85 bf       	out	0x35, r24	; 53
     c76:	0d c0       	rjmp	.+26     	; 0xc92 <EXTI_enable+0x54>
     c78:	85 b7       	in	r24, 0x35	; 53
     c7a:	8e 7f       	andi	r24, 0xFE	; 254
     c7c:	85 bf       	out	0x35, r24	; 53
     c7e:	85 b7       	in	r24, 0x35	; 53
     c80:	8d 7f       	andi	r24, 0xFD	; 253
     c82:	85 bf       	out	0x35, r24	; 53
     c84:	06 c0       	rjmp	.+12     	; 0xc92 <EXTI_enable+0x54>
     c86:	85 b7       	in	r24, 0x35	; 53
     c88:	81 60       	ori	r24, 0x01	; 1
     c8a:	85 bf       	out	0x35, r24	; 53
     c8c:	85 b7       	in	r24, 0x35	; 53
     c8e:	8d 7f       	andi	r24, 0xFD	; 253
     c90:	85 bf       	out	0x35, r24	; 53
     c92:	8b b7       	in	r24, 0x3b	; 59
     c94:	80 64       	ori	r24, 0x40	; 64
     c96:	8b bf       	out	0x3b, r24	; 59
     c98:	08 95       	ret
     c9a:	61 30       	cpi	r22, 0x01	; 1
     c9c:	69 f0       	breq	.+26     	; 0xcb8 <EXTI_enable+0x7a>
     c9e:	28 f0       	brcs	.+10     	; 0xcaa <EXTI_enable+0x6c>
     ca0:	62 30       	cpi	r22, 0x02	; 2
     ca2:	89 f0       	breq	.+34     	; 0xcc6 <EXTI_enable+0x88>
     ca4:	63 30       	cpi	r22, 0x03	; 3
     ca6:	b1 f0       	breq	.+44     	; 0xcd4 <EXTI_enable+0x96>
     ca8:	1b c0       	rjmp	.+54     	; 0xce0 <EXTI_enable+0xa2>
     caa:	85 b7       	in	r24, 0x35	; 53
     cac:	84 60       	ori	r24, 0x04	; 4
     cae:	85 bf       	out	0x35, r24	; 53
     cb0:	85 b7       	in	r24, 0x35	; 53
     cb2:	88 60       	ori	r24, 0x08	; 8
     cb4:	85 bf       	out	0x35, r24	; 53
     cb6:	14 c0       	rjmp	.+40     	; 0xce0 <EXTI_enable+0xa2>
     cb8:	85 b7       	in	r24, 0x35	; 53
     cba:	8b 7f       	andi	r24, 0xFB	; 251
     cbc:	85 bf       	out	0x35, r24	; 53
     cbe:	85 b7       	in	r24, 0x35	; 53
     cc0:	88 60       	ori	r24, 0x08	; 8
     cc2:	85 bf       	out	0x35, r24	; 53
     cc4:	0d c0       	rjmp	.+26     	; 0xce0 <EXTI_enable+0xa2>
     cc6:	85 b7       	in	r24, 0x35	; 53
     cc8:	8b 7f       	andi	r24, 0xFB	; 251
     cca:	85 bf       	out	0x35, r24	; 53
     ccc:	85 b7       	in	r24, 0x35	; 53
     cce:	87 7f       	andi	r24, 0xF7	; 247
     cd0:	85 bf       	out	0x35, r24	; 53
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <EXTI_enable+0xa2>
     cd4:	85 b7       	in	r24, 0x35	; 53
     cd6:	84 60       	ori	r24, 0x04	; 4
     cd8:	85 bf       	out	0x35, r24	; 53
     cda:	85 b7       	in	r24, 0x35	; 53
     cdc:	87 7f       	andi	r24, 0xF7	; 247
     cde:	85 bf       	out	0x35, r24	; 53
     ce0:	8b b7       	in	r24, 0x3b	; 59
     ce2:	80 68       	ori	r24, 0x80	; 128
     ce4:	8b bf       	out	0x3b, r24	; 59
     ce6:	08 95       	ret
     ce8:	66 23       	and	r22, r22
     cea:	19 f0       	breq	.+6      	; 0xcf2 <EXTI_enable+0xb4>
     cec:	61 30       	cpi	r22, 0x01	; 1
     cee:	29 f0       	breq	.+10     	; 0xcfa <EXTI_enable+0xbc>
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <EXTI_enable+0xc2>
     cf2:	84 b7       	in	r24, 0x34	; 52
     cf4:	80 64       	ori	r24, 0x40	; 64
     cf6:	84 bf       	out	0x34, r24	; 52
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <EXTI_enable+0xc2>
     cfa:	84 b7       	in	r24, 0x34	; 52
     cfc:	8f 7b       	andi	r24, 0xBF	; 191
     cfe:	84 bf       	out	0x34, r24	; 52
     d00:	8b b7       	in	r24, 0x3b	; 59
     d02:	80 62       	ori	r24, 0x20	; 32
     d04:	8b bf       	out	0x3b, r24	; 59
     d06:	08 95       	ret

00000d08 <EXTI_setCallBack>:
}


void EXTI_setCallBack(void(*ptrToFun)(void))
{
	if(ptrToFun!=NULL)
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	21 f0       	breq	.+8      	; 0xd14 <EXTI_setCallBack+0xc>
	{
		private_pCallBackEXTI = ptrToFun;
     d0c:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <private_pCallBackEXTI+0x1>
     d10:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <private_pCallBackEXTI>
     d14:	08 95       	ret

00000d16 <__vector_1>:



void __vector_1(void)__attribute__((signal));
void __vector_1(void)
{
     d16:	1f 92       	push	r1
     d18:	0f 92       	push	r0
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	0f 92       	push	r0
     d1e:	11 24       	eor	r1, r1
     d20:	2f 93       	push	r18
     d22:	3f 93       	push	r19
     d24:	4f 93       	push	r20
     d26:	5f 93       	push	r21
     d28:	6f 93       	push	r22
     d2a:	7f 93       	push	r23
     d2c:	8f 93       	push	r24
     d2e:	9f 93       	push	r25
     d30:	af 93       	push	r26
     d32:	bf 93       	push	r27
     d34:	ef 93       	push	r30
     d36:	ff 93       	push	r31
	
	
	//call action
	if(private_pCallBackEXTI != NULL)
     d38:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <private_pCallBackEXTI>
     d3c:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <private_pCallBackEXTI+0x1>
     d40:	30 97       	sbiw	r30, 0x00	; 0
     d42:	09 f0       	breq	.+2      	; 0xd46 <__vector_1+0x30>
	{
		private_pCallBackEXTI();
     d44:	09 95       	icall
	}
	
	

     d46:	ff 91       	pop	r31
     d48:	ef 91       	pop	r30
     d4a:	bf 91       	pop	r27
     d4c:	af 91       	pop	r26
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	7f 91       	pop	r23
     d54:	6f 91       	pop	r22
     d56:	5f 91       	pop	r21
     d58:	4f 91       	pop	r20
     d5a:	3f 91       	pop	r19
     d5c:	2f 91       	pop	r18
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <GI_enable>:
#include "GI_private.h"


void GI_enable(void)
{
	SET_BIT(SREG,I);
     d68:	8f b7       	in	r24, 0x3f	; 63
     d6a:	80 68       	ori	r24, 0x80	; 128
     d6c:	8f bf       	out	0x3f, r24	; 63
     d6e:	08 95       	ret

00000d70 <TMR0_init>:

void TMR0_setCallBackCTC(void(*ptrToFun)(void))
{
	if(ptrToFun!=NULL)
	{
		private_pCallBackCTC = ptrToFun;
     d70:	83 b7       	in	r24, 0x33	; 51
     d72:	8f 7b       	andi	r24, 0xBF	; 191
     d74:	83 bf       	out	0x33, r24	; 51
     d76:	83 b7       	in	r24, 0x33	; 51
     d78:	87 7f       	andi	r24, 0xF7	; 247
     d7a:	83 bf       	out	0x33, r24	; 51
     d7c:	81 e7       	ldi	r24, 0x71	; 113
     d7e:	82 bf       	out	0x32, r24	; 50
     d80:	89 b7       	in	r24, 0x39	; 57
     d82:	81 60       	ori	r24, 0x01	; 1
     d84:	89 bf       	out	0x39, r24	; 57
     d86:	08 95       	ret

00000d88 <TMR0_start>:
     d88:	83 b7       	in	r24, 0x33	; 51
     d8a:	81 60       	ori	r24, 0x01	; 1
     d8c:	83 bf       	out	0x33, r24	; 51
     d8e:	83 b7       	in	r24, 0x33	; 51
     d90:	82 60       	ori	r24, 0x02	; 2
     d92:	83 bf       	out	0x33, r24	; 51
     d94:	83 b7       	in	r24, 0x33	; 51
     d96:	8b 7f       	andi	r24, 0xFB	; 251
     d98:	83 bf       	out	0x33, r24	; 51
     d9a:	08 95       	ret

00000d9c <__vector_10>:



void __vector_10(void) __attribute__ ((signal));
void __vector_10(void)
{
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	11 24       	eor	r1, r1
     da6:	2f 93       	push	r18
     da8:	3f 93       	push	r19
     daa:	4f 93       	push	r20
     dac:	5f 93       	push	r21
     dae:	6f 93       	push	r22
     db0:	7f 93       	push	r23
     db2:	8f 93       	push	r24
     db4:	9f 93       	push	r25
     db6:	af 93       	push	r26
     db8:	bf 93       	push	r27
     dba:	ef 93       	push	r30
     dbc:	ff 93       	push	r31
	static u16 ctcCounter = 0;
	ctcCounter++;
     dbe:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <ctcCounter.1622>
     dc2:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <ctcCounter.1622+0x1>
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <ctcCounter.1622+0x1>
     dcc:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <ctcCounter.1622>
	
	if(private_ctcCounter == ctcCounter)
     dd0:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <private_ctcCounter>
     dd4:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <private_ctcCounter+0x1>
     dd8:	82 17       	cp	r24, r18
     dda:	93 07       	cpc	r25, r19
     ddc:	59 f4       	brne	.+22     	; 0xdf4 <__vector_10+0x58>
	{
		// Clear Counter
		ctcCounter = 0;
     dde:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <ctcCounter.1622+0x1>
     de2:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <ctcCounter.1622>
		
		//call action
		if(private_pCallBackCTC != NULL)
     de6:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <private_pCallBackCTC>
     dea:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <private_pCallBackCTC+0x1>
     dee:	30 97       	sbiw	r30, 0x00	; 0
     df0:	09 f0       	breq	.+2      	; 0xdf4 <__vector_10+0x58>
		{
			private_pCallBackCTC();
     df2:	09 95       	icall
		}
	}
}
     df4:	ff 91       	pop	r31
     df6:	ef 91       	pop	r30
     df8:	bf 91       	pop	r27
     dfa:	af 91       	pop	r26
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	7f 91       	pop	r23
     e02:	6f 91       	pop	r22
     e04:	5f 91       	pop	r21
     e06:	4f 91       	pop	r20
     e08:	3f 91       	pop	r19
     e0a:	2f 91       	pop	r18
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <__vector_11>:

volatile u16 OvfCounter = 0;

void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
     e16:	1f 92       	push	r1
     e18:	0f 92       	push	r0
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	0f 92       	push	r0
     e1e:	11 24       	eor	r1, r1
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
	OvfCounter++;
     e24:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <OvfCounter>
     e28:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <OvfCounter+0x1>
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <OvfCounter+0x1>
     e32:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <OvfCounter>
}
     e36:	9f 91       	pop	r25
     e38:	8f 91       	pop	r24
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <TMR1_init>:


void TMR1_setCompareMatchValueA (u16 compareValue)
{
	
	OCR1A_u16=compareValue;
     e44:	8f b5       	in	r24, 0x2f	; 47
     e46:	8e 7f       	andi	r24, 0xFE	; 254
     e48:	8f bd       	out	0x2f, r24	; 47
     e4a:	8f b5       	in	r24, 0x2f	; 47
     e4c:	82 60       	ori	r24, 0x02	; 2
     e4e:	8f bd       	out	0x2f, r24	; 47
     e50:	8e b5       	in	r24, 0x2e	; 46
     e52:	88 60       	ori	r24, 0x08	; 8
     e54:	8e bd       	out	0x2e, r24	; 46
     e56:	8e b5       	in	r24, 0x2e	; 46
     e58:	80 61       	ori	r24, 0x10	; 16
     e5a:	8e bd       	out	0x2e, r24	; 46
     e5c:	8f b5       	in	r24, 0x2f	; 47
     e5e:	8f 7b       	andi	r24, 0xBF	; 191
     e60:	8f bd       	out	0x2f, r24	; 47
     e62:	8f b5       	in	r24, 0x2f	; 47
     e64:	80 68       	ori	r24, 0x80	; 128
     e66:	8f bd       	out	0x2f, r24	; 47
     e68:	08 95       	ret

00000e6a <TMR1_start>:
     e6a:	8e b5       	in	r24, 0x2e	; 46
     e6c:	81 60       	ori	r24, 0x01	; 1
     e6e:	8e bd       	out	0x2e, r24	; 46
     e70:	8e b5       	in	r24, 0x2e	; 46
     e72:	82 60       	ori	r24, 0x02	; 2
     e74:	8e bd       	out	0x2e, r24	; 46
     e76:	8e b5       	in	r24, 0x2e	; 46
     e78:	8b 7f       	andi	r24, 0xFB	; 251
     e7a:	8e bd       	out	0x2e, r24	; 46
     e7c:	08 95       	ret

00000e7e <TMR1_setFastPWM_usingMode14>:

}


void TMR1_setFastPWM_usingMode14(f32 dytyCycle, u16 frequency_hz)
{
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	6b 01       	movw	r12, r22
     e8c:	7c 01       	movw	r14, r24
     e8e:	ea 01       	movw	r28, r20
	if(dytyCycle <= 100)
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	48 ec       	ldi	r20, 0xC8	; 200
     e96:	52 e4       	ldi	r21, 0x42	; 66
     e98:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__cmpsf2>
     e9c:	18 16       	cp	r1, r24
     e9e:	5c f1       	brlt	.+86     	; 0xef6 <TMR1_setFastPWM_usingMode14+0x78>
	{
		// under condition non inverting fast pwm & tick time 4 MS
		
		ICR1_u16  = ((1000000UL/frequency_hz)/4)-1;
     ea0:	9e 01       	movw	r18, r28
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	60 e9       	ldi	r22, 0x90	; 144
     ea8:	70 ed       	ldi	r23, 0xD0	; 208
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 4f 0a 	call	0x149e	; 0x149e <__udivmodsi4>
     eb2:	21 50       	subi	r18, 0x01	; 1
     eb4:	31 09       	sbc	r19, r1
     eb6:	37 bd       	out	0x27, r19	; 39
     eb8:	26 bd       	out	0x26, r18	; 38
		
		OCR1A_u16 = ((dytyCycle*(ICR1_u16+1))/100.0)-1;
     eba:	66 b5       	in	r22, 0x26	; 38
     ebc:	77 b5       	in	r23, 0x27	; 39
     ebe:	6f 5f       	subi	r22, 0xFF	; 255
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 2b 09 	call	0x1256	; 0x1256 <__floatunsisf>
     eca:	9b 01       	movw	r18, r22
     ecc:	ac 01       	movw	r20, r24
     ece:	c7 01       	movw	r24, r14
     ed0:	b6 01       	movw	r22, r12
     ed2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__mulsf3>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	48 ec       	ldi	r20, 0xC8	; 200
     edc:	52 e4       	ldi	r21, 0x42	; 66
     ede:	0e 94 83 08 	call	0x1106	; 0x1106 <__divsf3>
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e8       	ldi	r20, 0x80	; 128
     ee8:	5f e3       	ldi	r21, 0x3F	; 63
     eea:	0e 94 11 08 	call	0x1022	; 0x1022 <__subsf3>
     eee:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__fixunssfsi>
     ef2:	7b bd       	out	0x2b, r23	; 43
     ef4:	6a bd       	out	0x2a, r22	; 42
	}
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	08 95       	ret

00000f04 <TMR2_init>:
}


void TMR2_setCompareMatchValue(u8 compareValue)
{
	OCR2=compareValue;
     f04:	85 b5       	in	r24, 0x25	; 37
     f06:	80 64       	ori	r24, 0x40	; 64
     f08:	85 bd       	out	0x25, r24	; 37
     f0a:	85 b5       	in	r24, 0x25	; 37
     f0c:	88 60       	ori	r24, 0x08	; 8
     f0e:	85 bd       	out	0x25, r24	; 37
     f10:	85 b5       	in	r24, 0x25	; 37
     f12:	8f 7e       	andi	r24, 0xEF	; 239
     f14:	85 bd       	out	0x25, r24	; 37
     f16:	85 b5       	in	r24, 0x25	; 37
     f18:	80 62       	ori	r24, 0x20	; 32
     f1a:	85 bd       	out	0x25, r24	; 37
     f1c:	08 95       	ret

00000f1e <TMR2_start>:
     f1e:	85 b5       	in	r24, 0x25	; 37
     f20:	8e 7f       	andi	r24, 0xFE	; 254
     f22:	85 bd       	out	0x25, r24	; 37
     f24:	85 b5       	in	r24, 0x25	; 37
     f26:	8d 7f       	andi	r24, 0xFD	; 253
     f28:	85 bd       	out	0x25, r24	; 37
     f2a:	85 b5       	in	r24, 0x25	; 37
     f2c:	84 60       	ori	r24, 0x04	; 4
     f2e:	85 bd       	out	0x25, r24	; 37
     f30:	08 95       	ret

00000f32 <__vector_5>:
     f32:	1f 92       	push	r1
     f34:	0f 92       	push	r0
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	0f 92       	push	r0
     f3a:	11 24       	eor	r1, r1
     f3c:	2f 93       	push	r18
     f3e:	3f 93       	push	r19
     f40:	4f 93       	push	r20
     f42:	5f 93       	push	r21
     f44:	6f 93       	push	r22
     f46:	7f 93       	push	r23
     f48:	8f 93       	push	r24
     f4a:	9f 93       	push	r25
     f4c:	af 93       	push	r26
     f4e:	bf 93       	push	r27
     f50:	ef 93       	push	r30
     f52:	ff 93       	push	r31
     f54:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <ovfCounter.1614>
     f58:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <ovfCounter.1614+0x1>
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <ovfCounter.1614+0x1>
     f62:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <ovfCounter.1614>
     f66:	81 3d       	cpi	r24, 0xD1	; 209
     f68:	93 40       	sbci	r25, 0x03	; 3
     f6a:	69 f4       	brne	.+26     	; 0xf86 <__vector_5+0x54>
     f6c:	81 e7       	ldi	r24, 0x71	; 113
     f6e:	84 bd       	out	0x24, r24	; 36
     f70:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <ovfCounter.1614+0x1>
     f74:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <ovfCounter.1614>
     f78:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <private_pCallBackOVF>
     f7c:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <private_pCallBackOVF+0x1>
     f80:	30 97       	sbiw	r30, 0x00	; 0
     f82:	09 f0       	breq	.+2      	; 0xf86 <__vector_5+0x54>
     f84:	09 95       	icall
     f86:	ff 91       	pop	r31
     f88:	ef 91       	pop	r30
     f8a:	bf 91       	pop	r27
     f8c:	af 91       	pop	r26
     f8e:	9f 91       	pop	r25
     f90:	8f 91       	pop	r24
     f92:	7f 91       	pop	r23
     f94:	6f 91       	pop	r22
     f96:	5f 91       	pop	r21
     f98:	4f 91       	pop	r20
     f9a:	3f 91       	pop	r19
     f9c:	2f 91       	pop	r18
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	0f 90       	pop	r0
     fa4:	1f 90       	pop	r1
     fa6:	18 95       	reti

00000fa8 <__vector_4>:
volatile static u16 private_ctcCounter;

void __vector_4(void)__attribute__((signal));
			  
void __vector_4(void)
{
     fa8:	1f 92       	push	r1
     faa:	0f 92       	push	r0
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	0f 92       	push	r0
     fb0:	11 24       	eor	r1, r1
     fb2:	2f 93       	push	r18
     fb4:	3f 93       	push	r19
     fb6:	4f 93       	push	r20
     fb8:	5f 93       	push	r21
     fba:	6f 93       	push	r22
     fbc:	7f 93       	push	r23
     fbe:	8f 93       	push	r24
     fc0:	9f 93       	push	r25
     fc2:	af 93       	push	r26
     fc4:	bf 93       	push	r27
     fc6:	ef 93       	push	r30
     fc8:	ff 93       	push	r31
	static u16 ctcCounter=0;
	
	ctcCounter++;
     fca:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <ctcCounter.1628>
     fce:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <ctcCounter.1628+0x1>
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <ctcCounter.1628+0x1>
     fd8:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <ctcCounter.1628>
	
	if(private_ctcCounter== ctcCounter)
     fdc:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <private_ctcCounter>
     fe0:	30 91 b3 00 	lds	r19, 0x00B3	; 0x8000b3 <private_ctcCounter+0x1>
     fe4:	82 17       	cp	r24, r18
     fe6:	93 07       	cpc	r25, r19
     fe8:	59 f4       	brne	.+22     	; 0x1000 <__vector_4+0x58>
	{
		
		ctcCounter=0;
     fea:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <ctcCounter.1628+0x1>
     fee:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <ctcCounter.1628>
		if(private_pCallBackCTC!=NULL)
     ff2:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <private_pCallBackCTC>
     ff6:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <private_pCallBackCTC+0x1>
     ffa:	30 97       	sbiw	r30, 0x00	; 0
     ffc:	09 f0       	breq	.+2      	; 0x1000 <__vector_4+0x58>
		{
			private_pCallBackCTC();
     ffe:	09 95       	icall
		}
	}
}
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <__subsf3>:
    1022:	50 58       	subi	r21, 0x80	; 128

00001024 <__addsf3>:
    1024:	bb 27       	eor	r27, r27
    1026:	aa 27       	eor	r26, r26
    1028:	0e 94 29 08 	call	0x1052	; 0x1052 <__addsf3x>
    102c:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_round>
    1030:	0e 94 95 09 	call	0x132a	; 0x132a <__fp_pscA>
    1034:	38 f0       	brcs	.+14     	; 0x1044 <__addsf3+0x20>
    1036:	0e 94 9c 09 	call	0x1338	; 0x1338 <__fp_pscB>
    103a:	20 f0       	brcs	.+8      	; 0x1044 <__addsf3+0x20>
    103c:	39 f4       	brne	.+14     	; 0x104c <__addsf3+0x28>
    103e:	9f 3f       	cpi	r25, 0xFF	; 255
    1040:	19 f4       	brne	.+6      	; 0x1048 <__addsf3+0x24>
    1042:	26 f4       	brtc	.+8      	; 0x104c <__addsf3+0x28>
    1044:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__fp_nan>
    1048:	0e f4       	brtc	.+2      	; 0x104c <__addsf3+0x28>
    104a:	e0 95       	com	r30
    104c:	e7 fb       	bst	r30, 7
    104e:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_inf>

00001052 <__addsf3x>:
    1052:	e9 2f       	mov	r30, r25
    1054:	0e 94 b4 09 	call	0x1368	; 0x1368 <__fp_split3>
    1058:	58 f3       	brcs	.-42     	; 0x1030 <__addsf3+0xc>
    105a:	ba 17       	cp	r27, r26
    105c:	62 07       	cpc	r22, r18
    105e:	73 07       	cpc	r23, r19
    1060:	84 07       	cpc	r24, r20
    1062:	95 07       	cpc	r25, r21
    1064:	20 f0       	brcs	.+8      	; 0x106e <__addsf3x+0x1c>
    1066:	79 f4       	brne	.+30     	; 0x1086 <__addsf3x+0x34>
    1068:	a6 f5       	brtc	.+104    	; 0x10d2 <__addsf3x+0x80>
    106a:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_zero>
    106e:	0e f4       	brtc	.+2      	; 0x1072 <__addsf3x+0x20>
    1070:	e0 95       	com	r30
    1072:	0b 2e       	mov	r0, r27
    1074:	ba 2f       	mov	r27, r26
    1076:	a0 2d       	mov	r26, r0
    1078:	0b 01       	movw	r0, r22
    107a:	b9 01       	movw	r22, r18
    107c:	90 01       	movw	r18, r0
    107e:	0c 01       	movw	r0, r24
    1080:	ca 01       	movw	r24, r20
    1082:	a0 01       	movw	r20, r0
    1084:	11 24       	eor	r1, r1
    1086:	ff 27       	eor	r31, r31
    1088:	59 1b       	sub	r21, r25
    108a:	99 f0       	breq	.+38     	; 0x10b2 <__addsf3x+0x60>
    108c:	59 3f       	cpi	r21, 0xF9	; 249
    108e:	50 f4       	brcc	.+20     	; 0x10a4 <__addsf3x+0x52>
    1090:	50 3e       	cpi	r21, 0xE0	; 224
    1092:	68 f1       	brcs	.+90     	; 0x10ee <__addsf3x+0x9c>
    1094:	1a 16       	cp	r1, r26
    1096:	f0 40       	sbci	r31, 0x00	; 0
    1098:	a2 2f       	mov	r26, r18
    109a:	23 2f       	mov	r18, r19
    109c:	34 2f       	mov	r19, r20
    109e:	44 27       	eor	r20, r20
    10a0:	58 5f       	subi	r21, 0xF8	; 248
    10a2:	f3 cf       	rjmp	.-26     	; 0x108a <__addsf3x+0x38>
    10a4:	46 95       	lsr	r20
    10a6:	37 95       	ror	r19
    10a8:	27 95       	ror	r18
    10aa:	a7 95       	ror	r26
    10ac:	f0 40       	sbci	r31, 0x00	; 0
    10ae:	53 95       	inc	r21
    10b0:	c9 f7       	brne	.-14     	; 0x10a4 <__addsf3x+0x52>
    10b2:	7e f4       	brtc	.+30     	; 0x10d2 <__addsf3x+0x80>
    10b4:	1f 16       	cp	r1, r31
    10b6:	ba 0b       	sbc	r27, r26
    10b8:	62 0b       	sbc	r22, r18
    10ba:	73 0b       	sbc	r23, r19
    10bc:	84 0b       	sbc	r24, r20
    10be:	ba f0       	brmi	.+46     	; 0x10ee <__addsf3x+0x9c>
    10c0:	91 50       	subi	r25, 0x01	; 1
    10c2:	a1 f0       	breq	.+40     	; 0x10ec <__addsf3x+0x9a>
    10c4:	ff 0f       	add	r31, r31
    10c6:	bb 1f       	adc	r27, r27
    10c8:	66 1f       	adc	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	88 1f       	adc	r24, r24
    10ce:	c2 f7       	brpl	.-16     	; 0x10c0 <__addsf3x+0x6e>
    10d0:	0e c0       	rjmp	.+28     	; 0x10ee <__addsf3x+0x9c>
    10d2:	ba 0f       	add	r27, r26
    10d4:	62 1f       	adc	r22, r18
    10d6:	73 1f       	adc	r23, r19
    10d8:	84 1f       	adc	r24, r20
    10da:	48 f4       	brcc	.+18     	; 0x10ee <__addsf3x+0x9c>
    10dc:	87 95       	ror	r24
    10de:	77 95       	ror	r23
    10e0:	67 95       	ror	r22
    10e2:	b7 95       	ror	r27
    10e4:	f7 95       	ror	r31
    10e6:	9e 3f       	cpi	r25, 0xFE	; 254
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <__addsf3x+0x9a>
    10ea:	b0 cf       	rjmp	.-160    	; 0x104c <__addsf3+0x28>
    10ec:	93 95       	inc	r25
    10ee:	88 0f       	add	r24, r24
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <__addsf3x+0xa2>
    10f2:	99 27       	eor	r25, r25
    10f4:	ee 0f       	add	r30, r30
    10f6:	97 95       	ror	r25
    10f8:	87 95       	ror	r24
    10fa:	08 95       	ret

000010fc <__cmpsf2>:
    10fc:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__fp_cmp>
    1100:	08 f4       	brcc	.+2      	; 0x1104 <__cmpsf2+0x8>
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	08 95       	ret

00001106 <__divsf3>:
    1106:	0e 94 97 08 	call	0x112e	; 0x112e <__divsf3x>
    110a:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_round>
    110e:	0e 94 9c 09 	call	0x1338	; 0x1338 <__fp_pscB>
    1112:	58 f0       	brcs	.+22     	; 0x112a <__divsf3+0x24>
    1114:	0e 94 95 09 	call	0x132a	; 0x132a <__fp_pscA>
    1118:	40 f0       	brcs	.+16     	; 0x112a <__divsf3+0x24>
    111a:	29 f4       	brne	.+10     	; 0x1126 <__divsf3+0x20>
    111c:	5f 3f       	cpi	r21, 0xFF	; 255
    111e:	29 f0       	breq	.+10     	; 0x112a <__divsf3+0x24>
    1120:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_inf>
    1124:	51 11       	cpse	r21, r1
    1126:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__fp_szero>
    112a:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__fp_nan>

0000112e <__divsf3x>:
    112e:	0e 94 b4 09 	call	0x1368	; 0x1368 <__fp_split3>
    1132:	68 f3       	brcs	.-38     	; 0x110e <__divsf3+0x8>

00001134 <__divsf3_pse>:
    1134:	99 23       	and	r25, r25
    1136:	b1 f3       	breq	.-20     	; 0x1124 <__divsf3+0x1e>
    1138:	55 23       	and	r21, r21
    113a:	91 f3       	breq	.-28     	; 0x1120 <__divsf3+0x1a>
    113c:	95 1b       	sub	r25, r21
    113e:	55 0b       	sbc	r21, r21
    1140:	bb 27       	eor	r27, r27
    1142:	aa 27       	eor	r26, r26
    1144:	62 17       	cp	r22, r18
    1146:	73 07       	cpc	r23, r19
    1148:	84 07       	cpc	r24, r20
    114a:	38 f0       	brcs	.+14     	; 0x115a <__divsf3_pse+0x26>
    114c:	9f 5f       	subi	r25, 0xFF	; 255
    114e:	5f 4f       	sbci	r21, 0xFF	; 255
    1150:	22 0f       	add	r18, r18
    1152:	33 1f       	adc	r19, r19
    1154:	44 1f       	adc	r20, r20
    1156:	aa 1f       	adc	r26, r26
    1158:	a9 f3       	breq	.-22     	; 0x1144 <__divsf3_pse+0x10>
    115a:	35 d0       	rcall	.+106    	; 0x11c6 <__divsf3_pse+0x92>
    115c:	0e 2e       	mov	r0, r30
    115e:	3a f0       	brmi	.+14     	; 0x116e <__divsf3_pse+0x3a>
    1160:	e0 e8       	ldi	r30, 0x80	; 128
    1162:	32 d0       	rcall	.+100    	; 0x11c8 <__divsf3_pse+0x94>
    1164:	91 50       	subi	r25, 0x01	; 1
    1166:	50 40       	sbci	r21, 0x00	; 0
    1168:	e6 95       	lsr	r30
    116a:	00 1c       	adc	r0, r0
    116c:	ca f7       	brpl	.-14     	; 0x1160 <__divsf3_pse+0x2c>
    116e:	2b d0       	rcall	.+86     	; 0x11c6 <__divsf3_pse+0x92>
    1170:	fe 2f       	mov	r31, r30
    1172:	29 d0       	rcall	.+82     	; 0x11c6 <__divsf3_pse+0x92>
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	bb 1f       	adc	r27, r27
    117c:	26 17       	cp	r18, r22
    117e:	37 07       	cpc	r19, r23
    1180:	48 07       	cpc	r20, r24
    1182:	ab 07       	cpc	r26, r27
    1184:	b0 e8       	ldi	r27, 0x80	; 128
    1186:	09 f0       	breq	.+2      	; 0x118a <__divsf3_pse+0x56>
    1188:	bb 0b       	sbc	r27, r27
    118a:	80 2d       	mov	r24, r0
    118c:	bf 01       	movw	r22, r30
    118e:	ff 27       	eor	r31, r31
    1190:	93 58       	subi	r25, 0x83	; 131
    1192:	5f 4f       	sbci	r21, 0xFF	; 255
    1194:	3a f0       	brmi	.+14     	; 0x11a4 <__divsf3_pse+0x70>
    1196:	9e 3f       	cpi	r25, 0xFE	; 254
    1198:	51 05       	cpc	r21, r1
    119a:	78 f0       	brcs	.+30     	; 0x11ba <__divsf3_pse+0x86>
    119c:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_inf>
    11a0:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__fp_szero>
    11a4:	5f 3f       	cpi	r21, 0xFF	; 255
    11a6:	e4 f3       	brlt	.-8      	; 0x11a0 <__divsf3_pse+0x6c>
    11a8:	98 3e       	cpi	r25, 0xE8	; 232
    11aa:	d4 f3       	brlt	.-12     	; 0x11a0 <__divsf3_pse+0x6c>
    11ac:	86 95       	lsr	r24
    11ae:	77 95       	ror	r23
    11b0:	67 95       	ror	r22
    11b2:	b7 95       	ror	r27
    11b4:	f7 95       	ror	r31
    11b6:	9f 5f       	subi	r25, 0xFF	; 255
    11b8:	c9 f7       	brne	.-14     	; 0x11ac <__divsf3_pse+0x78>
    11ba:	88 0f       	add	r24, r24
    11bc:	91 1d       	adc	r25, r1
    11be:	96 95       	lsr	r25
    11c0:	87 95       	ror	r24
    11c2:	97 f9       	bld	r25, 7
    11c4:	08 95       	ret
    11c6:	e1 e0       	ldi	r30, 0x01	; 1
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	bb 1f       	adc	r27, r27
    11d0:	62 17       	cp	r22, r18
    11d2:	73 07       	cpc	r23, r19
    11d4:	84 07       	cpc	r24, r20
    11d6:	ba 07       	cpc	r27, r26
    11d8:	20 f0       	brcs	.+8      	; 0x11e2 <__divsf3_pse+0xae>
    11da:	62 1b       	sub	r22, r18
    11dc:	73 0b       	sbc	r23, r19
    11de:	84 0b       	sbc	r24, r20
    11e0:	ba 0b       	sbc	r27, r26
    11e2:	ee 1f       	adc	r30, r30
    11e4:	88 f7       	brcc	.-30     	; 0x11c8 <__divsf3_pse+0x94>
    11e6:	e0 95       	com	r30
    11e8:	08 95       	ret

000011ea <__fixsfsi>:
    11ea:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__fixunssfsi>
    11ee:	68 94       	set
    11f0:	b1 11       	cpse	r27, r1
    11f2:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__fp_szero>
    11f6:	08 95       	ret

000011f8 <__fixunssfsi>:
    11f8:	0e 94 bc 09 	call	0x1378	; 0x1378 <__fp_splitA>
    11fc:	88 f0       	brcs	.+34     	; 0x1220 <__fixunssfsi+0x28>
    11fe:	9f 57       	subi	r25, 0x7F	; 127
    1200:	98 f0       	brcs	.+38     	; 0x1228 <__fixunssfsi+0x30>
    1202:	b9 2f       	mov	r27, r25
    1204:	99 27       	eor	r25, r25
    1206:	b7 51       	subi	r27, 0x17	; 23
    1208:	b0 f0       	brcs	.+44     	; 0x1236 <__fixunssfsi+0x3e>
    120a:	e1 f0       	breq	.+56     	; 0x1244 <__fixunssfsi+0x4c>
    120c:	66 0f       	add	r22, r22
    120e:	77 1f       	adc	r23, r23
    1210:	88 1f       	adc	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	1a f0       	brmi	.+6      	; 0x121c <__fixunssfsi+0x24>
    1216:	ba 95       	dec	r27
    1218:	c9 f7       	brne	.-14     	; 0x120c <__fixunssfsi+0x14>
    121a:	14 c0       	rjmp	.+40     	; 0x1244 <__fixunssfsi+0x4c>
    121c:	b1 30       	cpi	r27, 0x01	; 1
    121e:	91 f0       	breq	.+36     	; 0x1244 <__fixunssfsi+0x4c>
    1220:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__fp_zero>
    1224:	b1 e0       	ldi	r27, 0x01	; 1
    1226:	08 95       	ret
    1228:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_zero>
    122c:	67 2f       	mov	r22, r23
    122e:	78 2f       	mov	r23, r24
    1230:	88 27       	eor	r24, r24
    1232:	b8 5f       	subi	r27, 0xF8	; 248
    1234:	39 f0       	breq	.+14     	; 0x1244 <__fixunssfsi+0x4c>
    1236:	b9 3f       	cpi	r27, 0xF9	; 249
    1238:	cc f3       	brlt	.-14     	; 0x122c <__fixunssfsi+0x34>
    123a:	86 95       	lsr	r24
    123c:	77 95       	ror	r23
    123e:	67 95       	ror	r22
    1240:	b3 95       	inc	r27
    1242:	d9 f7       	brne	.-10     	; 0x123a <__fixunssfsi+0x42>
    1244:	3e f4       	brtc	.+14     	; 0x1254 <__fixunssfsi+0x5c>
    1246:	90 95       	com	r25
    1248:	80 95       	com	r24
    124a:	70 95       	com	r23
    124c:	61 95       	neg	r22
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
    1250:	8f 4f       	sbci	r24, 0xFF	; 255
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	08 95       	ret

00001256 <__floatunsisf>:
    1256:	e8 94       	clt
    1258:	09 c0       	rjmp	.+18     	; 0x126c <__floatsisf+0x12>

0000125a <__floatsisf>:
    125a:	97 fb       	bst	r25, 7
    125c:	3e f4       	brtc	.+14     	; 0x126c <__floatsisf+0x12>
    125e:	90 95       	com	r25
    1260:	80 95       	com	r24
    1262:	70 95       	com	r23
    1264:	61 95       	neg	r22
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
    1268:	8f 4f       	sbci	r24, 0xFF	; 255
    126a:	9f 4f       	sbci	r25, 0xFF	; 255
    126c:	99 23       	and	r25, r25
    126e:	a9 f0       	breq	.+42     	; 0x129a <__floatsisf+0x40>
    1270:	f9 2f       	mov	r31, r25
    1272:	96 e9       	ldi	r25, 0x96	; 150
    1274:	bb 27       	eor	r27, r27
    1276:	93 95       	inc	r25
    1278:	f6 95       	lsr	r31
    127a:	87 95       	ror	r24
    127c:	77 95       	ror	r23
    127e:	67 95       	ror	r22
    1280:	b7 95       	ror	r27
    1282:	f1 11       	cpse	r31, r1
    1284:	f8 cf       	rjmp	.-16     	; 0x1276 <__floatsisf+0x1c>
    1286:	fa f4       	brpl	.+62     	; 0x12c6 <__floatsisf+0x6c>
    1288:	bb 0f       	add	r27, r27
    128a:	11 f4       	brne	.+4      	; 0x1290 <__floatsisf+0x36>
    128c:	60 ff       	sbrs	r22, 0
    128e:	1b c0       	rjmp	.+54     	; 0x12c6 <__floatsisf+0x6c>
    1290:	6f 5f       	subi	r22, 0xFF	; 255
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	8f 4f       	sbci	r24, 0xFF	; 255
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	16 c0       	rjmp	.+44     	; 0x12c6 <__floatsisf+0x6c>
    129a:	88 23       	and	r24, r24
    129c:	11 f0       	breq	.+4      	; 0x12a2 <__floatsisf+0x48>
    129e:	96 e9       	ldi	r25, 0x96	; 150
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <__floatsisf+0x6a>
    12a2:	77 23       	and	r23, r23
    12a4:	21 f0       	breq	.+8      	; 0x12ae <__floatsisf+0x54>
    12a6:	9e e8       	ldi	r25, 0x8E	; 142
    12a8:	87 2f       	mov	r24, r23
    12aa:	76 2f       	mov	r23, r22
    12ac:	05 c0       	rjmp	.+10     	; 0x12b8 <__floatsisf+0x5e>
    12ae:	66 23       	and	r22, r22
    12b0:	71 f0       	breq	.+28     	; 0x12ce <__floatsisf+0x74>
    12b2:	96 e8       	ldi	r25, 0x86	; 134
    12b4:	86 2f       	mov	r24, r22
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	2a f0       	brmi	.+10     	; 0x12c6 <__floatsisf+0x6c>
    12bc:	9a 95       	dec	r25
    12be:	66 0f       	add	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	88 1f       	adc	r24, r24
    12c4:	da f7       	brpl	.-10     	; 0x12bc <__floatsisf+0x62>
    12c6:	88 0f       	add	r24, r24
    12c8:	96 95       	lsr	r25
    12ca:	87 95       	ror	r24
    12cc:	97 f9       	bld	r25, 7
    12ce:	08 95       	ret

000012d0 <__fp_cmp>:
    12d0:	99 0f       	add	r25, r25
    12d2:	00 08       	sbc	r0, r0
    12d4:	55 0f       	add	r21, r21
    12d6:	aa 0b       	sbc	r26, r26
    12d8:	e0 e8       	ldi	r30, 0x80	; 128
    12da:	fe ef       	ldi	r31, 0xFE	; 254
    12dc:	16 16       	cp	r1, r22
    12de:	17 06       	cpc	r1, r23
    12e0:	e8 07       	cpc	r30, r24
    12e2:	f9 07       	cpc	r31, r25
    12e4:	c0 f0       	brcs	.+48     	; 0x1316 <__fp_cmp+0x46>
    12e6:	12 16       	cp	r1, r18
    12e8:	13 06       	cpc	r1, r19
    12ea:	e4 07       	cpc	r30, r20
    12ec:	f5 07       	cpc	r31, r21
    12ee:	98 f0       	brcs	.+38     	; 0x1316 <__fp_cmp+0x46>
    12f0:	62 1b       	sub	r22, r18
    12f2:	73 0b       	sbc	r23, r19
    12f4:	84 0b       	sbc	r24, r20
    12f6:	95 0b       	sbc	r25, r21
    12f8:	39 f4       	brne	.+14     	; 0x1308 <__fp_cmp+0x38>
    12fa:	0a 26       	eor	r0, r26
    12fc:	61 f0       	breq	.+24     	; 0x1316 <__fp_cmp+0x46>
    12fe:	23 2b       	or	r18, r19
    1300:	24 2b       	or	r18, r20
    1302:	25 2b       	or	r18, r21
    1304:	21 f4       	brne	.+8      	; 0x130e <__fp_cmp+0x3e>
    1306:	08 95       	ret
    1308:	0a 26       	eor	r0, r26
    130a:	09 f4       	brne	.+2      	; 0x130e <__fp_cmp+0x3e>
    130c:	a1 40       	sbci	r26, 0x01	; 1
    130e:	a6 95       	lsr	r26
    1310:	8f ef       	ldi	r24, 0xFF	; 255
    1312:	81 1d       	adc	r24, r1
    1314:	81 1d       	adc	r24, r1
    1316:	08 95       	ret

00001318 <__fp_inf>:
    1318:	97 f9       	bld	r25, 7
    131a:	9f 67       	ori	r25, 0x7F	; 127
    131c:	80 e8       	ldi	r24, 0x80	; 128
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	08 95       	ret

00001324 <__fp_nan>:
    1324:	9f ef       	ldi	r25, 0xFF	; 255
    1326:	80 ec       	ldi	r24, 0xC0	; 192
    1328:	08 95       	ret

0000132a <__fp_pscA>:
    132a:	00 24       	eor	r0, r0
    132c:	0a 94       	dec	r0
    132e:	16 16       	cp	r1, r22
    1330:	17 06       	cpc	r1, r23
    1332:	18 06       	cpc	r1, r24
    1334:	09 06       	cpc	r0, r25
    1336:	08 95       	ret

00001338 <__fp_pscB>:
    1338:	00 24       	eor	r0, r0
    133a:	0a 94       	dec	r0
    133c:	12 16       	cp	r1, r18
    133e:	13 06       	cpc	r1, r19
    1340:	14 06       	cpc	r1, r20
    1342:	05 06       	cpc	r0, r21
    1344:	08 95       	ret

00001346 <__fp_round>:
    1346:	09 2e       	mov	r0, r25
    1348:	03 94       	inc	r0
    134a:	00 0c       	add	r0, r0
    134c:	11 f4       	brne	.+4      	; 0x1352 <__fp_round+0xc>
    134e:	88 23       	and	r24, r24
    1350:	52 f0       	brmi	.+20     	; 0x1366 <__fp_round+0x20>
    1352:	bb 0f       	add	r27, r27
    1354:	40 f4       	brcc	.+16     	; 0x1366 <__fp_round+0x20>
    1356:	bf 2b       	or	r27, r31
    1358:	11 f4       	brne	.+4      	; 0x135e <__fp_round+0x18>
    135a:	60 ff       	sbrs	r22, 0
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <__fp_round+0x20>
    135e:	6f 5f       	subi	r22, 0xFF	; 255
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	8f 4f       	sbci	r24, 0xFF	; 255
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	08 95       	ret

00001368 <__fp_split3>:
    1368:	57 fd       	sbrc	r21, 7
    136a:	90 58       	subi	r25, 0x80	; 128
    136c:	44 0f       	add	r20, r20
    136e:	55 1f       	adc	r21, r21
    1370:	59 f0       	breq	.+22     	; 0x1388 <__fp_splitA+0x10>
    1372:	5f 3f       	cpi	r21, 0xFF	; 255
    1374:	71 f0       	breq	.+28     	; 0x1392 <__fp_splitA+0x1a>
    1376:	47 95       	ror	r20

00001378 <__fp_splitA>:
    1378:	88 0f       	add	r24, r24
    137a:	97 fb       	bst	r25, 7
    137c:	99 1f       	adc	r25, r25
    137e:	61 f0       	breq	.+24     	; 0x1398 <__fp_splitA+0x20>
    1380:	9f 3f       	cpi	r25, 0xFF	; 255
    1382:	79 f0       	breq	.+30     	; 0x13a2 <__fp_splitA+0x2a>
    1384:	87 95       	ror	r24
    1386:	08 95       	ret
    1388:	12 16       	cp	r1, r18
    138a:	13 06       	cpc	r1, r19
    138c:	14 06       	cpc	r1, r20
    138e:	55 1f       	adc	r21, r21
    1390:	f2 cf       	rjmp	.-28     	; 0x1376 <__fp_split3+0xe>
    1392:	46 95       	lsr	r20
    1394:	f1 df       	rcall	.-30     	; 0x1378 <__fp_splitA>
    1396:	08 c0       	rjmp	.+16     	; 0x13a8 <__fp_splitA+0x30>
    1398:	16 16       	cp	r1, r22
    139a:	17 06       	cpc	r1, r23
    139c:	18 06       	cpc	r1, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	f1 cf       	rjmp	.-30     	; 0x1384 <__fp_splitA+0xc>
    13a2:	86 95       	lsr	r24
    13a4:	71 05       	cpc	r23, r1
    13a6:	61 05       	cpc	r22, r1
    13a8:	08 94       	sec
    13aa:	08 95       	ret

000013ac <__fp_zero>:
    13ac:	e8 94       	clt

000013ae <__fp_szero>:
    13ae:	bb 27       	eor	r27, r27
    13b0:	66 27       	eor	r22, r22
    13b2:	77 27       	eor	r23, r23
    13b4:	cb 01       	movw	r24, r22
    13b6:	97 f9       	bld	r25, 7
    13b8:	08 95       	ret

000013ba <__gesf2>:
    13ba:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__fp_cmp>
    13be:	08 f4       	brcc	.+2      	; 0x13c2 <__gesf2+0x8>
    13c0:	8f ef       	ldi	r24, 0xFF	; 255
    13c2:	08 95       	ret

000013c4 <__mulsf3>:
    13c4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__mulsf3x>
    13c8:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_round>
    13cc:	0e 94 95 09 	call	0x132a	; 0x132a <__fp_pscA>
    13d0:	38 f0       	brcs	.+14     	; 0x13e0 <__mulsf3+0x1c>
    13d2:	0e 94 9c 09 	call	0x1338	; 0x1338 <__fp_pscB>
    13d6:	20 f0       	brcs	.+8      	; 0x13e0 <__mulsf3+0x1c>
    13d8:	95 23       	and	r25, r21
    13da:	11 f0       	breq	.+4      	; 0x13e0 <__mulsf3+0x1c>
    13dc:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_inf>
    13e0:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__fp_nan>
    13e4:	11 24       	eor	r1, r1
    13e6:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__fp_szero>

000013ea <__mulsf3x>:
    13ea:	0e 94 b4 09 	call	0x1368	; 0x1368 <__fp_split3>
    13ee:	70 f3       	brcs	.-36     	; 0x13cc <__mulsf3+0x8>

000013f0 <__mulsf3_pse>:
    13f0:	95 9f       	mul	r25, r21
    13f2:	c1 f3       	breq	.-16     	; 0x13e4 <__mulsf3+0x20>
    13f4:	95 0f       	add	r25, r21
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	55 1f       	adc	r21, r21
    13fa:	62 9f       	mul	r22, r18
    13fc:	f0 01       	movw	r30, r0
    13fe:	72 9f       	mul	r23, r18
    1400:	bb 27       	eor	r27, r27
    1402:	f0 0d       	add	r31, r0
    1404:	b1 1d       	adc	r27, r1
    1406:	63 9f       	mul	r22, r19
    1408:	aa 27       	eor	r26, r26
    140a:	f0 0d       	add	r31, r0
    140c:	b1 1d       	adc	r27, r1
    140e:	aa 1f       	adc	r26, r26
    1410:	64 9f       	mul	r22, r20
    1412:	66 27       	eor	r22, r22
    1414:	b0 0d       	add	r27, r0
    1416:	a1 1d       	adc	r26, r1
    1418:	66 1f       	adc	r22, r22
    141a:	82 9f       	mul	r24, r18
    141c:	22 27       	eor	r18, r18
    141e:	b0 0d       	add	r27, r0
    1420:	a1 1d       	adc	r26, r1
    1422:	62 1f       	adc	r22, r18
    1424:	73 9f       	mul	r23, r19
    1426:	b0 0d       	add	r27, r0
    1428:	a1 1d       	adc	r26, r1
    142a:	62 1f       	adc	r22, r18
    142c:	83 9f       	mul	r24, r19
    142e:	a0 0d       	add	r26, r0
    1430:	61 1d       	adc	r22, r1
    1432:	22 1f       	adc	r18, r18
    1434:	74 9f       	mul	r23, r20
    1436:	33 27       	eor	r19, r19
    1438:	a0 0d       	add	r26, r0
    143a:	61 1d       	adc	r22, r1
    143c:	23 1f       	adc	r18, r19
    143e:	84 9f       	mul	r24, r20
    1440:	60 0d       	add	r22, r0
    1442:	21 1d       	adc	r18, r1
    1444:	82 2f       	mov	r24, r18
    1446:	76 2f       	mov	r23, r22
    1448:	6a 2f       	mov	r22, r26
    144a:	11 24       	eor	r1, r1
    144c:	9f 57       	subi	r25, 0x7F	; 127
    144e:	50 40       	sbci	r21, 0x00	; 0
    1450:	9a f0       	brmi	.+38     	; 0x1478 <__mulsf3_pse+0x88>
    1452:	f1 f0       	breq	.+60     	; 0x1490 <__mulsf3_pse+0xa0>
    1454:	88 23       	and	r24, r24
    1456:	4a f0       	brmi	.+18     	; 0x146a <__mulsf3_pse+0x7a>
    1458:	ee 0f       	add	r30, r30
    145a:	ff 1f       	adc	r31, r31
    145c:	bb 1f       	adc	r27, r27
    145e:	66 1f       	adc	r22, r22
    1460:	77 1f       	adc	r23, r23
    1462:	88 1f       	adc	r24, r24
    1464:	91 50       	subi	r25, 0x01	; 1
    1466:	50 40       	sbci	r21, 0x00	; 0
    1468:	a9 f7       	brne	.-22     	; 0x1454 <__mulsf3_pse+0x64>
    146a:	9e 3f       	cpi	r25, 0xFE	; 254
    146c:	51 05       	cpc	r21, r1
    146e:	80 f0       	brcs	.+32     	; 0x1490 <__mulsf3_pse+0xa0>
    1470:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_inf>
    1474:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__fp_szero>
    1478:	5f 3f       	cpi	r21, 0xFF	; 255
    147a:	e4 f3       	brlt	.-8      	; 0x1474 <__mulsf3_pse+0x84>
    147c:	98 3e       	cpi	r25, 0xE8	; 232
    147e:	d4 f3       	brlt	.-12     	; 0x1474 <__mulsf3_pse+0x84>
    1480:	86 95       	lsr	r24
    1482:	77 95       	ror	r23
    1484:	67 95       	ror	r22
    1486:	b7 95       	ror	r27
    1488:	f7 95       	ror	r31
    148a:	e7 95       	ror	r30
    148c:	9f 5f       	subi	r25, 0xFF	; 255
    148e:	c1 f7       	brne	.-16     	; 0x1480 <__mulsf3_pse+0x90>
    1490:	fe 2b       	or	r31, r30
    1492:	88 0f       	add	r24, r24
    1494:	91 1d       	adc	r25, r1
    1496:	96 95       	lsr	r25
    1498:	87 95       	ror	r24
    149a:	97 f9       	bld	r25, 7
    149c:	08 95       	ret

0000149e <__udivmodsi4>:
    149e:	a1 e2       	ldi	r26, 0x21	; 33
    14a0:	1a 2e       	mov	r1, r26
    14a2:	aa 1b       	sub	r26, r26
    14a4:	bb 1b       	sub	r27, r27
    14a6:	fd 01       	movw	r30, r26
    14a8:	0d c0       	rjmp	.+26     	; 0x14c4 <__udivmodsi4_ep>

000014aa <__udivmodsi4_loop>:
    14aa:	aa 1f       	adc	r26, r26
    14ac:	bb 1f       	adc	r27, r27
    14ae:	ee 1f       	adc	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	a2 17       	cp	r26, r18
    14b4:	b3 07       	cpc	r27, r19
    14b6:	e4 07       	cpc	r30, r20
    14b8:	f5 07       	cpc	r31, r21
    14ba:	20 f0       	brcs	.+8      	; 0x14c4 <__udivmodsi4_ep>
    14bc:	a2 1b       	sub	r26, r18
    14be:	b3 0b       	sbc	r27, r19
    14c0:	e4 0b       	sbc	r30, r20
    14c2:	f5 0b       	sbc	r31, r21

000014c4 <__udivmodsi4_ep>:
    14c4:	66 1f       	adc	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	88 1f       	adc	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	1a 94       	dec	r1
    14ce:	69 f7       	brne	.-38     	; 0x14aa <__udivmodsi4_loop>
    14d0:	60 95       	com	r22
    14d2:	70 95       	com	r23
    14d4:	80 95       	com	r24
    14d6:	90 95       	com	r25
    14d8:	9b 01       	movw	r18, r22
    14da:	ac 01       	movw	r20, r24
    14dc:	bd 01       	movw	r22, r26
    14de:	cf 01       	movw	r24, r30
    14e0:	08 95       	ret

000014e2 <__divmodsi4>:
    14e2:	05 2e       	mov	r0, r21
    14e4:	97 fb       	bst	r25, 7
    14e6:	1e f4       	brtc	.+6      	; 0x14ee <__divmodsi4+0xc>
    14e8:	00 94       	com	r0
    14ea:	0e 94 88 0a 	call	0x1510	; 0x1510 <__negsi2>
    14ee:	57 fd       	sbrc	r21, 7
    14f0:	07 d0       	rcall	.+14     	; 0x1500 <__divmodsi4_neg2>
    14f2:	0e 94 4f 0a 	call	0x149e	; 0x149e <__udivmodsi4>
    14f6:	07 fc       	sbrc	r0, 7
    14f8:	03 d0       	rcall	.+6      	; 0x1500 <__divmodsi4_neg2>
    14fa:	4e f4       	brtc	.+18     	; 0x150e <__divmodsi4_exit>
    14fc:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__negsi2>

00001500 <__divmodsi4_neg2>:
    1500:	50 95       	com	r21
    1502:	40 95       	com	r20
    1504:	30 95       	com	r19
    1506:	21 95       	neg	r18
    1508:	3f 4f       	sbci	r19, 0xFF	; 255
    150a:	4f 4f       	sbci	r20, 0xFF	; 255
    150c:	5f 4f       	sbci	r21, 0xFF	; 255

0000150e <__divmodsi4_exit>:
    150e:	08 95       	ret

00001510 <__negsi2>:
    1510:	90 95       	com	r25
    1512:	80 95       	com	r24
    1514:	70 95       	com	r23
    1516:	61 95       	neg	r22
    1518:	7f 4f       	sbci	r23, 0xFF	; 255
    151a:	8f 4f       	sbci	r24, 0xFF	; 255
    151c:	9f 4f       	sbci	r25, 0xFF	; 255
    151e:	08 95       	ret

00001520 <_exit>:
    1520:	f8 94       	cli

00001522 <__stop_program>:
    1522:	ff cf       	rjmp	.-2      	; 0x1522 <__stop_program>
